<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.8"/>
<title>Code::Blocks: Tokenizer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Code::Blocks
   &#160;<span id="projectnumber">SVN r10054</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.8 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#pri-static-attribs">Static Private Attributes</a> &#124;
<a href="classTokenizer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Tokenizer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is just a simple lexer class.  
 <a href="classTokenizer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="tokenizer_8h_source.xhtml">tokenizer.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for Tokenizer:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classTokenizer__coll__graph.svg" width="1764" height="2935"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6b09a4a30dd22cf37df53c56ce19d1a8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a6b09a4a30dd22cf37df53c56ce19d1a8">Tokenizer</a> (<a class="el" href="classTokenTree.xhtml">TokenTree</a> *tokenTree, const wxString &amp;filename=wxEmptyString)</td></tr>
<tr class="separator:a6b09a4a30dd22cf37df53c56ce19d1a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f60f887953edf0f95ba5f36102f7017"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a3f60f887953edf0f95ba5f36102f7017">~Tokenizer</a> ()</td></tr>
<tr class="separator:a3f60f887953edf0f95ba5f36102f7017"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5d2000b5492f2c4e603ccddaac56522"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init</a> (const wxString &amp;filename=wxEmptyString, <a class="el" href="classLoaderBase.xhtml">LoaderBase</a> *loader=0)</td></tr>
<tr class="separator:aa5d2000b5492f2c4e603ccddaac56522"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9e5082fade9bdcc47bf90f483a37f69"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer</a> (const wxString &amp;buffer, const wxString &amp;fileOfBuffer=wxEmptyString, size_t initLineNumber=0)</td></tr>
<tr class="separator:ad9e5082fade9bdcc47bf90f483a37f69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7addae7ad10df1c1550739eaf786d89"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken</a> ()</td></tr>
<tr class="separator:ac7addae7ad10df1c1550739eaf786d89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a736574152ebabf5ab26241104780c775"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken</a> ()</td></tr>
<tr class="separator:a736574152ebabf5ab26241104780c775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7f992387098dd3a486a9c994c9d5d7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken</a> ()</td></tr>
<tr class="separator:ac7f992387098dd3a486a9c994c9d5d7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2d02ca538bc1f189147da232ca3193d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ab2d02ca538bc1f189147da232ca3193d">SetTokenizerOption</a> (bool wantPreprocessor, bool storeDocumentation)</td></tr>
<tr class="separator:ab2d02ca538bc1f189147da232ca3193d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d9b0da5d3c5a5a82772fa181687deb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a0d9b0da5d3c5a5a82772fa181687deb3">SetState</a> (<a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845">TokenizerState</a> state)</td></tr>
<tr class="separator:a0d9b0da5d3c5a5a82772fa181687deb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60cb0bbabbc5c926ae8d8c2cd1dcdd50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845">TokenizerState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a60cb0bbabbc5c926ae8d8c2cd1dcdd50">GetState</a> ()</td></tr>
<tr class="separator:a60cb0bbabbc5c926ae8d8c2cd1dcdd50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9443936dc27df9f31c9c1049378979fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a9443936dc27df9f31c9c1049378979fd">IsSkippingUnwantedTokens</a> () const </td></tr>
<tr class="separator:a9443936dc27df9f31c9c1049378979fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37bada75b07c120619498b10db279698"><td class="memItemLeft" align="right" valign="top">const wxString &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a37bada75b07c120619498b10db279698">GetFilename</a> () const </td></tr>
<tr class="separator:a37bada75b07c120619498b10db279698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7093d8d59e2073b0312fba06465484c"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ad7093d8d59e2073b0312fba06465484c">GetLineNumber</a> () const </td></tr>
<tr class="separator:ad7093d8d59e2073b0312fba06465484c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae64f675daaadc90087b35e31776c4aea"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ae64f675daaadc90087b35e31776c4aea">GetNestingLevel</a> () const </td></tr>
<tr class="separator:ae64f675daaadc90087b35e31776c4aea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf2c13aafcb90ecf14536957c94cd350"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#acf2c13aafcb90ecf14536957c94cd350">SaveNestingLevel</a> ()</td></tr>
<tr class="separator:acf2c13aafcb90ecf14536957c94cd350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a531bbc786a41aa5fefc9ad4dc8cc24e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a531bbc786a41aa5fefc9ad4dc8cc24e1">RestoreNestingLevel</a> ()</td></tr>
<tr class="separator:a531bbc786a41aa5fefc9ad4dc8cc24e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa13432af2028be6fbc3a82ea0ae4ed6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aa13432af2028be6fbc3a82ea0ae4ed6c">IsOK</a> () const </td></tr>
<tr class="separator:aa13432af2028be6fbc3a82ea0ae4ed6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3733bafa796a5cee1c24e10b99cff9f9"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL</a> (bool nestBraces=true, bool stripUnneeded=true)</td></tr>
<tr class="separator:a3733bafa796a5cee1c24e10b99cff9f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae378c62367917203a6e39ed35d8c7447"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses</a> (wxString &amp;str)</td></tr>
<tr class="separator:ae378c62367917203a6e39ed35d8c7447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab767d45e38396a43059010e7b2721fea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL</a> (bool nestBraces=true)</td></tr>
<tr class="separator:ab767d45e38396a43059010e7b2721fea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a906abdace9ee254f514617e9f4460708"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd</a> ()</td></tr>
<tr class="separator:a906abdace9ee254f514617e9f4460708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19475c7b83ffc0fe88feb8b1d011477b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF</a> () const </td></tr>
<tr class="separator:a19475c7b83ffc0fe88feb8b1d011477b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eca266878979398035defc786898aab"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF</a> () const </td></tr>
<tr class="separator:a2eca266878979398035defc786898aab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac929769563e5b389e6444568d06eb6ef"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText</a> (const wxString &amp;target)</td></tr>
<tr class="separator:ac929769563e5b389e6444568d06eb6ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1586b3f6ef6979c9938f1205a9749e47"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a1586b3f6ef6979c9938f1205a9749e47">ReplaceMacroUsage</a> (const <a class="el" href="classToken.xhtml">Token</a> *tk)</td></tr>
<tr class="separator:a1586b3f6ef6979c9938f1205a9749e47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9825a2e0beecf6e28a6bdc6cce5def4b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a9825a2e0beecf6e28a6bdc6cce5def4b">GetFirstTokenPosition</a> (const wxString &amp;buffer, const wxString &amp;target)</td></tr>
<tr class="separator:a9825a2e0beecf6e28a6bdc6cce5def4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe48f27266c7963302cd6057a65b8949"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#abe48f27266c7963302cd6057a65b8949">GetFirstTokenPosition</a> (const wxChar *buffer, const size_t bufferLen, const wxChar *key, const size_t keyLen)</td></tr>
<tr class="separator:abe48f27266c7963302cd6057a65b8949"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45b4353b4bacf5a7afa487b6e2301008"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a45b4353b4bacf5a7afa487b6e2301008">KMP_Find</a> (const wxChar *text, const wxChar *pattern, const int patternLen)</td></tr>
<tr class="separator:a45b4353b4bacf5a7afa487b6e2301008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29fcd3e97359af69875dd7b2fd4c6261"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a29fcd3e97359af69875dd7b2fd4c6261">SetLastTokenIdx</a> (int tokenIdx)</td></tr>
<tr class="separator:a29fcd3e97359af69875dd7b2fd4c6261"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aecd704eb77201aecc908571b84ed2a3e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aecd704eb77201aecc908571b84ed2a3e">SetReplacementString</a> (const wxString &amp;from, const wxString &amp;to)</td></tr>
<tr class="separator:aecd704eb77201aecc908571b84ed2a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b3e4519a607a99b737e199d548ba5a4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a1b3e4519a607a99b737e199d548ba5a4">RemoveReplacementString</a> (const wxString &amp;from)</td></tr>
<tr class="separator:a1b3e4519a607a99b737e199d548ba5a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad44ad26a686ba76883b02d2d758f6101"><td class="memItemLeft" align="right" valign="top">static wxStringHashMap &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ad44ad26a686ba76883b02d2d758f6101">GetTokenReplacementsMap</a> ()</td></tr>
<tr class="separator:ad44ad26a686ba76883b02d2d758f6101"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cfcc35b74814401923fc99b8325c179"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a5cfcc35b74814401923fc99b8325c179">ConvertToHashReplacementMap</a> (const <a class="el" href="namespaceConfigManagerContainer.xhtml#a13539edd2648c2495999798f606dac62">ConfigManagerContainer::StringToStringMap</a> &amp;<a class="el" href="config-testsuite_8cpp.xhtml#a69836d004005a0d8f2eee22ec4257000">map</a>)</td></tr>
<tr class="separator:a5cfcc35b74814401923fc99b8325c179"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:aafb8ccfe3c5bd8422452b71e971bfa44"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit</a> ()</td></tr>
<tr class="separator:aafb8ccfe3c5bd8422452b71e971bfa44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3e239675d52c7e2bfd6c5e8accf320a"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken</a> ()</td></tr>
<tr class="separator:ae3e239675d52c7e2bfd6c5e8accf320a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae07cdfdaf21627535b35b841c520081c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ae07cdfdaf21627535b35b841c520081c">ReadFile</a> ()</td></tr>
<tr class="separator:ae07cdfdaf21627535b35b841c520081c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d7d08ad92ba1b08e1691f1d97035611"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a4d7d08ad92ba1b08e1691f1d97035611">IsEscapedChar</a> ()</td></tr>
<tr class="separator:a4d7d08ad92ba1b08e1691f1d97035611"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedd3de1dabf8721b99635a299221ecc3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aedd3de1dabf8721b99635a299221ecc3">SkipToChar</a> (const wxChar &amp;ch)</td></tr>
<tr class="separator:aedd3de1dabf8721b99635a299221ecc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9a084f22b37f907c7c1d80b601dd227"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars</a> (const wxChar *chars, bool supportNesting=false, bool skipPreprocessor=false, bool skipAngleBrace=true)</td></tr>
<tr class="separator:aa9a084f22b37f907c7c1d80b601dd227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6725a0177157fc77b863c3102705cc55"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock</a> (const wxChar &amp;ch)</td></tr>
<tr class="separator:a6725a0177157fc77b863c3102705cc55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a130fc36a6ae8bc85595a448b2431bcaa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted</a> ()</td></tr>
<tr class="separator:a130fc36a6ae8bc85595a448b2431bcaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d2f91aa84112de86fb090730d73a75"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace</a> ()</td></tr>
<tr class="separator:a99d2f91aa84112de86fb090730d73a75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a446e3f3933eddafe1c327cad72b3033f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment</a> ()</td></tr>
<tr class="separator:a446e3f3933eddafe1c327cad72b3033f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82319cf803b161f1f850a46a211ed41c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString</a> ()</td></tr>
<tr class="separator:a82319cf803b161f1f850a46a211ed41c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2905a9697b5ae1bf0f50f75c168c654a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a2905a9697b5ae1bf0f50f75c168c654a">SkipToStringEnd</a> (const wxChar &amp;ch)</td></tr>
<tr class="separator:a2905a9697b5ae1bf0f50f75c168c654a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87c2f2339823fe5e8666ec97ff1f9302"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar</a> (const unsigned int amount=1)</td></tr>
<tr class="separator:a87c2f2339823fe5e8666ec97ff1f9302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9687b4b9dd5c230d91b0e7544cd9d350"><td class="memItemLeft" align="right" valign="top">wxChar&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar</a> () const </td></tr>
<tr class="separator:a9687b4b9dd5c230d91b0e7544cd9d350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14096c1090d7698bc98bdcf657b8308f"><td class="memItemLeft" align="right" valign="top">wxChar&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a14096c1090d7698bc98bdcf657b8308f">CurrentCharMoveNext</a> ()</td></tr>
<tr class="separator:a14096c1090d7698bc98bdcf657b8308f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12cb86a8a2732a6173cc2034a1b4dc25"><td class="memItemLeft" align="right" valign="top">wxChar&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar</a> () const </td></tr>
<tr class="separator:a12cb86a8a2732a6173cc2034a1b4dc25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a390765d4a92dccf76213179d341c8f10"><td class="memItemLeft" align="right" valign="top">wxChar&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar</a> () const </td></tr>
<tr class="separator:a390765d4a92dccf76213179d341c8f10"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:ad603a21c2095c3d9c4b1bce525b3c154"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ad603a21c2095c3d9c4b1bce525b3c154">CharInString</a> (const wxChar ch, const wxChar *chars) const </td></tr>
<tr class="separator:ad603a21c2095c3d9c4b1bce525b3c154"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ed03f311660d8763c3fefa3a7de9898"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL</a> ()</td></tr>
<tr class="separator:a0ed03f311660d8763c3fefa3a7de9898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc55243d2c7b13625fd01979a9cb2431"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken</a> (wxString &amp;str)</td></tr>
<tr class="separator:acc55243d2c7b13625fd01979a9cb2431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b778c6166d72a15dcd1089350131328"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression</a> ()</td></tr>
<tr class="separator:a5b778c6166d72a15dcd1089350131328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc703fa5cf3da9f48f56740ba6b3a697"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#adc703fa5cf3da9f48f56740ba6b3a697">IsMacroDefined</a> ()</td></tr>
<tr class="separator:adc703fa5cf3da9f48f56740ba6b3a697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74009fa8bbcaf3b9fd14b8ac3970748a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor</a> ()</td></tr>
<tr class="separator:a74009fa8bbcaf3b9fd14b8ac3970748a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9744b9b8f1edc3b01636f8e72d93fe3a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor</a> ()</td></tr>
<tr class="separator:a9744b9b8f1edc3b01636f8e72d93fe3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c8e922045ecac0af220bec337745448"><td class="memItemLeft" align="right" valign="top"><a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559">PreprocessorType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType</a> ()</td></tr>
<tr class="separator:a8c8e922045ecac0af220bec337745448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd511d462eb3685601dc98fc15a91b8b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor</a> (const <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559">PreprocessorType</a> type)</td></tr>
<tr class="separator:afd511d462eb3685601dc98fc15a91b8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14327d3879c1c138e1b6e30508f9c939"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments</a> (wxArrayString &amp;results)</td></tr>
<tr class="separator:a14327d3879c1c138e1b6e30508f9c939"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a117194417bb717e020039e91a0e3affe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a117194417bb717e020039e91a0e3affe">GetMacroExpandedText</a> (const <a class="el" href="classToken.xhtml">Token</a> *tk, wxString &amp;expandedText)</td></tr>
<tr class="separator:a117194417bb717e020039e91a0e3affe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b859309a0024c309c9a0331e7456d51"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a3b859309a0024c309c9a0331e7456d51">KMP_GetNextVal</a> (const wxChar *pattern, int next[])</td></tr>
<tr class="separator:a3b859309a0024c309c9a0331e7456d51"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a7130a6e4eab333551d3847b638e9238a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="tokenizer_8h.xhtml#structTokenizerOptions">TokenizerOptions</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a7130a6e4eab333551d3847b638e9238a">m_TokenizerOptions</a></td></tr>
<tr class="separator:a7130a6e4eab333551d3847b638e9238a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a074d189d560cfa8a66d2abcfe7e45a71"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classTokenTree.xhtml">TokenTree</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a></td></tr>
<tr class="separator:a074d189d560cfa8a66d2abcfe7e45a71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7ec19d970a7c6491b3b4b02aa65b7b7"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aa7ec19d970a7c6491b3b4b02aa65b7b7">m_Filename</a></td></tr>
<tr class="separator:aa7ec19d970a7c6491b3b4b02aa65b7b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac633d3b00073cfd51b51778f48353be7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ac633d3b00073cfd51b51778f48353be7">m_FileIdx</a></td></tr>
<tr class="separator:ac633d3b00073cfd51b51778f48353be7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a904820ec391c983bca88f3dc7358ddc1"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a></td></tr>
<tr class="separator:a904820ec391c983bca88f3dc7358ddc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcd0287624f5ab04641a695e126d3265"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a></td></tr>
<tr class="separator:abcd0287624f5ab04641a695e126d3265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afedfcfcf12801e07d247d87d57e18a00"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#afedfcfcf12801e07d247d87d57e18a00">m_Token</a></td></tr>
<tr class="memdesc:afedfcfcf12801e07d247d87d57e18a00"><td class="mdescLeft">&#160;</td><td class="mdescRight">token name  <a href="#afedfcfcf12801e07d247d87d57e18a00">More...</a><br /></td></tr>
<tr class="separator:afedfcfcf12801e07d247d87d57e18a00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ad789658ddbf09bdfe7291564632c7f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a></td></tr>
<tr class="separator:a5ad789658ddbf09bdfe7291564632c7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52c4a2537f4689107464a1758ff82b83"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a></td></tr>
<tr class="separator:a52c4a2537f4689107464a1758ff82b83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d20d25188897957cff8a17daaba6669"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a></td></tr>
<tr class="separator:a2d20d25188897957cff8a17daaba6669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a165b332bb25e5d15c03ed3c50d3b6d0c"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a165b332bb25e5d15c03ed3c50d3b6d0c">m_UndoTokenIndex</a></td></tr>
<tr class="separator:a165b332bb25e5d15c03ed3c50d3b6d0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab00cbabae219258b6205f30f2bf2fedb"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ab00cbabae219258b6205f30f2bf2fedb">m_UndoLineNumber</a></td></tr>
<tr class="separator:ab00cbabae219258b6205f30f2bf2fedb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac909e921e9d3ed3b8387573665df9c7f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ac909e921e9d3ed3b8387573665df9c7f">m_UndoNestLevel</a></td></tr>
<tr class="separator:ac909e921e9d3ed3b8387573665df9c7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a213f9af6ff22e26a0172b0d93676a5ac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a213f9af6ff22e26a0172b0d93676a5ac">m_PeekAvailable</a></td></tr>
<tr class="separator:a213f9af6ff22e26a0172b0d93676a5ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1a9e4495d88d4fa48e70477adae1cdf"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#af1a9e4495d88d4fa48e70477adae1cdf">m_PeekToken</a></td></tr>
<tr class="separator:af1a9e4495d88d4fa48e70477adae1cdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88e1b4936a5b806a79ef6bfa828b3f69"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a88e1b4936a5b806a79ef6bfa828b3f69">m_PeekTokenIndex</a></td></tr>
<tr class="separator:a88e1b4936a5b806a79ef6bfa828b3f69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b5ae52e84d7cd049f7938fbd62691d"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#ad4b5ae52e84d7cd049f7938fbd62691d">m_PeekLineNumber</a></td></tr>
<tr class="separator:ad4b5ae52e84d7cd049f7938fbd62691d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a215e173a59256f49f2090d9b1490b5f3"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a215e173a59256f49f2090d9b1490b5f3">m_PeekNestLevel</a></td></tr>
<tr class="separator:a215e173a59256f49f2090d9b1490b5f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b8be9404c80f4c3121c6ccc6cef7f64"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a1b8be9404c80f4c3121c6ccc6cef7f64">m_SavedTokenIndex</a></td></tr>
<tr class="separator:a1b8be9404c80f4c3121c6ccc6cef7f64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a918eb8fea467374098e62d38caa3af9e"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a918eb8fea467374098e62d38caa3af9e">m_SavedLineNumber</a></td></tr>
<tr class="separator:a918eb8fea467374098e62d38caa3af9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa80eea79a36ecabea18086b6154b6d1f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aa80eea79a36ecabea18086b6154b6d1f">m_SavedNestingLevel</a></td></tr>
<tr class="separator:aa80eea79a36ecabea18086b6154b6d1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a456b81e262e9543fa1c0c89f5e886f94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a456b81e262e9543fa1c0c89f5e886f94">m_IsOK</a></td></tr>
<tr class="separator:a456b81e262e9543fa1c0c89f5e886f94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23022c55329b9d0594c28fe7e61ff75f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845">TokenizerState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a></td></tr>
<tr class="separator:a23022c55329b9d0594c28fe7e61ff75f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06ce2a825c6431604a9afd76d7c66a0b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classLoaderBase.xhtml">LoaderBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a06ce2a825c6431604a9afd76d7c66a0b">m_Loader</a></td></tr>
<tr class="separator:a06ce2a825c6431604a9afd76d7c66a0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9780b2202ef02a89fd1b6a087b614508"><td class="memItemLeft" align="right" valign="top">std::stack&lt; bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a9780b2202ef02a89fd1b6a087b614508">m_ExpressionResult</a></td></tr>
<tr class="separator:a9780b2202ef02a89fd1b6a087b614508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea2e7b0795fc4ef6a5704e475da120f4"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aea2e7b0795fc4ef6a5704e475da120f4">m_FirstRemainingLength</a></td></tr>
<tr class="separator:aea2e7b0795fc4ef6a5704e475da120f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeef805501531537a551331a4b42a6054"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#aeef805501531537a551331a4b42a6054">m_RepeatReplaceCount</a></td></tr>
<tr class="separator:aeef805501531537a551331a4b42a6054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82725839dff7d9b965d65cc20a578dce"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a82725839dff7d9b965d65cc20a578dce">m_NextTokenDoc</a></td></tr>
<tr class="separator:a82725839dff7d9b965d65cc20a578dce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26f4e66b19304d32ef750d8bd89bdf30"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a26f4e66b19304d32ef750d8bd89bdf30">m_LastTokenIdx</a></td></tr>
<tr class="separator:a26f4e66b19304d32ef750d8bd89bdf30"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-attribs"></a>
Static Private Attributes</h2></td></tr>
<tr class="memitem:a7c3843608b817dedc7fa21f5a0c457aa"><td class="memItemLeft" align="right" valign="top">static wxStringHashMap&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTokenizer.xhtml#a7c3843608b817dedc7fa21f5a0c457aa">s_Replacements</a></td></tr>
<tr class="separator:a7c3843608b817dedc7fa21f5a0c457aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is just a simple lexer class. </p>
<p>A <a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> does the lexical analysis on a buffer. The buffer is either a wxString loaded from a local source/header file or a wxString already in memory(e.g. the scintilla text buffer). The most public interfaces are two member functions: <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a> and <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>. The former one eats one token string from buffer, the later one does a "look ahead" on the buffer and return the next token string(peeked string). The peeked string will be cached until the next <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a> call, thus performance can be improved. Also, <a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> class does some kind of handling "Macro replacement" on the buffer to imitate the macro expansion in C-preprocessor, see member-function <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a> for details. Further more, it handles some "conditional preprocessor directives"(like "#if xxx"). </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a6b09a4a30dd22cf37df53c56ce19d1a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Tokenizer::Tokenizer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classTokenTree.xhtml">TokenTree</a> *&#160;</td>
          <td class="paramname"><em>tokenTree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>wxEmptyString</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> constructor. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>the file to be opened. </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, <a class="el" href="classTokenizer.xhtml#aa7ec19d970a7c6491b3b4b02aa65b7b7">m_Filename</a>, <a class="el" href="classTokenizer.xhtml#a7130a6e4eab333551d3847b638e9238a">m_TokenizerOptions</a>, <a class="el" href="tokenizer_8h.xhtml#ac5291d358b16470514572ab8ef1d427e">TokenizerOptions::storeDocumentation</a>, and <a class="el" href="tokenizer_8h.xhtml#a8bef33981dbf50f4b11f557d6dccf625">TokenizerOptions::wantPreprocessor</a>.</p>

</div>
</div>
<a class="anchor" id="a3f60f887953edf0f95ba5f36102f7017"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Tokenizer::~Tokenizer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aafb8ccfe3c5bd8422452b71e971bfa44"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::BaseInit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initialize some member variables </p>

<p>References <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#aea2e7b0795fc4ef6a5704e475da120f4">m_FirstRemainingLength</a>, <a class="el" href="classTokenizer.xhtml#a456b81e262e9543fa1c0c89f5e886f94">m_IsOK</a>, <a class="el" href="classTokenizer.xhtml#a26f4e66b19304d32ef750d8bd89bdf30">m_LastTokenIdx</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a82725839dff7d9b965d65cc20a578dce">m_NextTokenDoc</a>, <a class="el" href="classTokenizer.xhtml#ad4b5ae52e84d7cd049f7938fbd62691d">m_PeekLineNumber</a>, <a class="el" href="classTokenizer.xhtml#a215e173a59256f49f2090d9b1490b5f3">m_PeekNestLevel</a>, <a class="el" href="classTokenizer.xhtml#a88e1b4936a5b806a79ef6bfa828b3f69">m_PeekTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#aeef805501531537a551331a4b42a6054">m_RepeatReplaceCount</a>, <a class="el" href="classTokenizer.xhtml#a918eb8fea467374098e62d38caa3af9e">m_SavedLineNumber</a>, <a class="el" href="classTokenizer.xhtml#aa80eea79a36ecabea18086b6154b6d1f">m_SavedNestingLevel</a>, <a class="el" href="classTokenizer.xhtml#a1b8be9404c80f4c3121c6ccc6cef7f64">m_SavedTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#ab00cbabae219258b6205f30f2bf2fedb">m_UndoLineNumber</a>, <a class="el" href="classTokenizer.xhtml#ac909e921e9d3ed3b8387573665df9c7f">m_UndoNestLevel</a>, and <a class="el" href="classTokenizer.xhtml#a165b332bb25e5d15c03ed3c50d3b6d0c">m_UndoTokenIndex</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, and <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>.</p>

</div>
</div>
<a class="anchor" id="a5b778c6166d72a15dcd1089350131328"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::CalcConditionExpression </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Judge what is the first block It will call 'SkipToEOL(false, true)' before returned. </p>

<p>References <a class="el" href="classExpression.xhtml#aa306d6b8aa85d8aace16fa1ca2f3982c">Expression::AddToInfixExpression()</a>, <a class="el" href="classTokenTree.xhtml#a27fc4ea2842b026514e7b7f92a5e578e">TokenTree::at()</a>, <a class="el" href="classExpression.xhtml#a32086003bded432c02f80b8a4c5e80a4">Expression::CalcPostfix()</a>, <a class="el" href="classExpression.xhtml#abd5d6655e417fd17da55637b3d6a7c59">Expression::ConvertInfixToPostfix()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classExpression.xhtml#a43747eeaeb1b0fbd44cd45848fff73b5">Expression::GetResult()</a>, <a class="el" href="classExpression.xhtml#ae2f6ceebd80fd2a792d0ae0d840c2af7">Expression::GetStatus()</a>, <a class="el" href="classTokenizer.xhtml#adc703fa5cf3da9f48f56740ba6b3a697">IsMacroDefined()</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a>, <a class="el" href="classTokenizer.xhtml#a1586b3f6ef6979c9938f1205a9749e47">ReplaceMacroUsage()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="token_8h.xhtml#a7a47dce04185ce6008048622cc792f25aa0ca06d013acd15e8fd2be8cb57c2f20">tkMacroDef</a>, <a class="el" href="classTokenTree.xhtml#a17bd02412b63df67ac246f89c4ad7997">TokenTree::TokenExists()</a>, <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>, and <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845a80da3efdca4e1162abce8315798a8791">tsReadRawExpression</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>.</p>

</div>
</div>
<a class="anchor" id="ad603a21c2095c3d9c4b1bce525b3c154"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::CharInString </td>
          <td>(</td>
          <td class="paramtype">const wxChar&#160;</td>
          <td class="paramname"><em>ch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxChar *&#160;</td>
          <td class="paramname"><em>chars</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check if a ch matches any characters in the wxChar array </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, and <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>.</p>

</div>
</div>
<a class="anchor" id="a5cfcc35b74814401923fc99b8325c179"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Tokenizer::ConvertToHashReplacementMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceConfigManagerContainer.xhtml#a13539edd2648c2495999798f606dac62">ConfigManagerContainer::StringToStringMap</a> &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>References <a class="el" href="classTokenizer.xhtml#a7c3843608b817dedc7fa21f5a0c457aa">s_Replacements</a>.</p>

<p>Referenced by <a class="el" href="classCodeCompletion.xhtml#af15c5ac891e6d76ebd2d108be5386570">CodeCompletion::LoadTokenReplacements()</a>.</p>

</div>
</div>
<a class="anchor" id="a9687b4b9dd5c230d91b0e7544cd9d350"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxChar Tokenizer::CurrentChar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the current character indexed by m_TokenIndex in the m_Buffer </p>

<p>References <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, and <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a14096c1090d7698bc98bdcf657b8308f">CurrentCharMoveNext()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, <a class="el" href="classTokenizer.xhtml#aedd3de1dabf8721b99635a299221ecc3">SkipToChar()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, <a class="el" href="classTokenizer.xhtml#a2905a9697b5ae1bf0f50f75c168c654a">SkipToStringEnd()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>, and <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>.</p>

</div>
</div>
<a class="anchor" id="a14096c1090d7698bc98bdcf657b8308f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxChar Tokenizer::CurrentCharMoveNext </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Do the previous two functions sequentially </p>

<p>References <a class="el" href="config-testsuite_8cpp.xhtml#a07f04e4e679e17d1f1c2f0a60cb74aaa">c</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, and <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>.</p>

</div>
</div>
<a class="anchor" id="ae3e239675d52c7e2bfd6c5e8accf320a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::DoGetToken </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Do the actual lexical analysis, both <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a> and <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a> will internally call this function. It just move the m_TokenIndex one step forward, and return a lexeme before the m_TokenIndex. </p>

<p>References <a class="el" href="config-testsuite_8cpp.xhtml#a07f04e4e679e17d1f1c2f0a60cb74aaa">c</a>, <a class="el" href="classTokenizer.xhtml#ad603a21c2095c3d9c4b1bce525b3c154">CharInString()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#ad2c924ae65afae3db0bf28701ae063e7">TokenizerConsts::colon()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#a3cc3d2ccf6fffe18a72428cee0a75c94">TokenizerConsts::colon_colon()</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#aea2e7b0795fc4ef6a5704e475da120f4">m_FirstRemainingLength</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#aeef805501531537a551331a4b42a6054">m_RepeatReplaceCount</a>, <a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845a80da3efdca4e1162abce8315798a8791">tsReadRawExpression</a>, and <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845a293a62eb7c47d5c04faa1ca70825efc4">tsSingleAngleBrace</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#adc703fa5cf3da9f48f56740ba6b3a697">IsMacroDefined()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, and <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>.</p>

</div>
</div>
<a class="anchor" id="a37bada75b07c120619498b10db279698"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const wxString&amp; Tokenizer::GetFilename </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the opened files name </p>

<p>References <a class="el" href="classTokenizer.xhtml#aa7ec19d970a7c6491b3b4b02aa65b7b7">m_Filename</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a2ef3649a1395a1c492f38e6b167582b4">ParserThread::HandleConditionalArguments()</a>, <a class="el" href="classParserThread.xhtml#a650a609cbd9745ae8bad1951586a4bfa">ParserThread::HandleForLoopArguments()</a>, <a class="el" href="classParserThread.xhtml#ad78eb9574aefe7f580aaa805f10fbe1b">ParserThread::ReadClsNames()</a>, and <a class="el" href="classParserThread.xhtml#ae5961cd32c994fa68fec25baa4ee053a">ParserThread::ReadVarNames()</a>.</p>

</div>
</div>
<a class="anchor" id="a9825a2e0beecf6e28a6bdc6cce5def4b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Tokenizer::GetFirstTokenPosition </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get first token position in buffer </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a117194417bb717e020039e91a0e3affe">GetMacroExpandedText()</a>.</p>

</div>
</div>
<a class="anchor" id="abe48f27266c7963302cd6057a65b8949"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Tokenizer::GetFirstTokenPosition </td>
          <td>(</td>
          <td class="paramtype">const wxChar *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>bufferLen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxChar *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>keyLen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>find the sub-string key in the whole buffer, return the first position of the key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">buffer</td><td>the content of the string </td></tr>
    <tr><td class="paramname">bufferLen</td><td>length of the string </td></tr>
    <tr><td class="paramname">key</td><td>the search key(sub-string) </td></tr>
    <tr><td class="paramname">keyLen</td><td>the search key length </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#a45b4353b4bacf5a7afa487b6e2301008">KMP_Find()</a>.</p>

</div>
</div>
<a class="anchor" id="ad7093d8d59e2073b0312fba06465484c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::GetLineNumber </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the line number of the current token string </p>

<p>References <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classParserThread.xhtml#ac899b2ea7761e46bb1f0d061f4d54691">ParserThread::HandleClass()</a>, <a class="el" href="classParserThread.xhtml#a2ef3649a1395a1c492f38e6b167582b4">ParserThread::HandleConditionalArguments()</a>, <a class="el" href="classParserThread.xhtml#ab55fd2bae9203888c0178c4df058636c">ParserThread::HandleDefines()</a>, <a class="el" href="classParserThread.xhtml#a4a9c62b81b02895349a1633ff744e8f7">ParserThread::HandleEnum()</a>, <a class="el" href="classParserThread.xhtml#a650a609cbd9745ae8bad1951586a4bfa">ParserThread::HandleForLoopArguments()</a>, <a class="el" href="classParserThread.xhtml#a5815c1b5dc1e6f26b69324f2f1842ee0">ParserThread::HandleFunction()</a>, <a class="el" href="classParserThread.xhtml#a36ab4001b8842ae1bea7452474aa63c3">ParserThread::HandleMacroExpansion()</a>, <a class="el" href="classParserThread.xhtml#a11bacf859a9b5a1a02c161331b0278f4">ParserThread::HandleNamespace()</a>, <a class="el" href="classParserThread.xhtml#aab08606cca9480bc978259ef8afc170d">ParserThread::HandleTypedef()</a>, <a class="el" href="classParserThread.xhtml#a7a2c99d6130cdb0df26472b6cc8b6b16">ParserThread::ParseBufferForNamespaces()</a>, <a class="el" href="classParserThread.xhtml#ad78eb9574aefe7f580aaa805f10fbe1b">ParserThread::ReadClsNames()</a>, and <a class="el" href="classParserThread.xhtml#ae5961cd32c994fa68fec25baa4ee053a">ParserThread::ReadVarNames()</a>.</p>

</div>
</div>
<a class="anchor" id="a117194417bb717e020039e91a0e3affe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::GetMacroExpandedText </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classToken.xhtml">Token</a> *&#160;</td>
          <td class="paramname"><em>tk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">wxString &amp;&#160;</td>
          <td class="paramname"><em>expandedText</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the text after macro expansion </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tk</td><td>the macro definition token, usually a function like macro definition </td></tr>
    <tr><td class="paramname">expandedText</td><td>is an output string </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#a9825a2e0beecf6e28a6bdc6cce5def4b">GetFirstTokenPosition()</a>, <a class="el" href="classToken.xhtml#a083cc36fabdd1fe73c8887314594c240">Token::m_Args</a>, <a class="el" href="classToken.xhtml#a1b939df520f020469a4023c9e121040f">Token::m_FullType</a>, <a class="el" href="classToken.xhtml#a66d4391491a9244d9c0e060045d9cdee">Token::m_Name</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a1586b3f6ef6979c9938f1205a9749e47">ReplaceMacroUsage()</a>.</p>

</div>
</div>
<a class="anchor" id="ae64f675daaadc90087b35e31776c4aea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::GetNestingLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the brace "{}" level. the value will increase by one when we meet a "{", decrease by one when we meet a "}". </p>

<p>References <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a4a9c62b81b02895349a1633ff744e8f7">ParserThread::HandleEnum()</a>, <a class="el" href="classParserThread.xhtml#a65973704432137e051aec1541d3d7236">ParserThread::SkipBlock()</a>, and <a class="el" href="classParserThread.xhtml#a3324c3f8b45443f087071a758676134a">ParserThread::SkipToOneOfChars()</a>.</p>

</div>
</div>
<a class="anchor" id="a8c8e922045ecac0af220bec337745448"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559">PreprocessorType</a> Tokenizer::GetPreprocessorType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get current conditional preprocessor type </p>

<p>References <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#af36fe254e1494f4d812742adb166c172">TokenizerConsts::kw_elif()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#a89ba7df17fb2e3c54bdb9fc2230709d7">TokenizerConsts::kw_elifdef()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#a22c7c8c71a77646986a0c166e2979ea8">TokenizerConsts::kw_elifndef()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#adbb522f320360323596129b87702867a">TokenizerConsts::kw_else()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#a41b1e285957029fcce7ac18bbd72a492">TokenizerConsts::kw_endif()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#ae2c43182a9a8ed1fb387cf8ff1ac557c">TokenizerConsts::kw_if()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#a3d61311157c7d340ffee98c57f10af8a">TokenizerConsts::kw_ifdef()</a>, <a class="el" href="namespaceTokenizerConsts.xhtml#a247a93ffcd94986120892a82c70196dc">TokenizerConsts::kw_ifndef()</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a6b429a39f396336c1cdcab96a9f580c7">ptElif</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559ab9889c6425e0e45fe8b651480ff9c91c">ptElifdef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a263a030a6d7924f95447ee3103c64ff2">ptElifndef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559aab909ea903a0e19d80d977aba670ad74">ptElse</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a213cc131000dd34668b61b18b8fac61c">ptEndif</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a91fbf147986e5abda54df5d6cf81aff9">ptIf</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a466eff97f6ab122bf171cc376a88bc31">ptIfdef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a427bd372c575b4dd8920164725a9cfc4">ptIfndef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559ae9a0b339aa15a161278071ed4a1b4876">ptOthers</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, and <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, and <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>.</p>

</div>
</div>
<a class="anchor" id="acc55243d2c7b13625fd01979a9cb2431"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::GetReplacedToken </td>
          <td>(</td>
          <td class="paramtype">wxString &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Do the Macro replacement according to the macro replacement rules, generally we have two kinds of macro replacements. One is the user defined macro replacement rules, which is hold by static member variable s_Replacements, you can let the tokenizer directly return a "BBB" string if the origin token is"AAA" , but you have a "AAA" -&gt; "BBB" rule. Another kind of macro replacement is that the tokenizer try to look up the token tree to see whether a token is a macro definition, if yes, it can expand the macro. The first kind of macro replacement happens every time when a tokenizer try to return a token, it is very fast as s_Replacements is a hash table, and have very limited entries, on the other side, looking up a token in the token tree takes more time, the later case only happens in some special cases, such has we are handling #if directives. </p>

<p>References <a class="el" href="classTokenTree.xhtml#a27fc4ea2842b026514e7b7f92a5e578e">TokenTree::at()</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classToken.xhtml#a083cc36fabdd1fe73c8887314594c240">Token::m_Args</a>, <a class="el" href="classTokenizer.xhtml#aa7ec19d970a7c6491b3b4b02aa65b7b7">m_Filename</a>, <a class="el" href="classToken.xhtml#a1b939df520f020469a4023c9e121040f">Token::m_FullType</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classToken.xhtml#a66d4391491a9244d9c0e060045d9cdee">Token::m_Name</a>, <a class="el" href="classTokenizer.xhtml#aeef805501531537a551331a4b42a6054">m_RepeatReplaceCount</a>, <a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, <a class="el" href="classTokenizer.xhtml#a1586b3f6ef6979c9938f1205a9749e47">ReplaceMacroUsage()</a>, <a class="el" href="classTokenizer.xhtml#a7c3843608b817dedc7fa21f5a0c457aa">s_Replacements</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>, <a class="el" href="token_8h.xhtml#a7a47dce04185ce6008048622cc792f25aa0ca06d013acd15e8fd2be8cb57c2f20">tkMacroDef</a>, <a class="el" href="classTokenTree.xhtml#a17bd02412b63df67ac246f89c4ad7997">TokenTree::TokenExists()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a60cb0bbabbc5c926ae8d8c2cd1dcdd50"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845">TokenizerState</a> Tokenizer::GetState </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the skipping options value, see TokenizerState for more details. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a997e91f1cbbf64ef9f8220e97dd7a240">ParserThread::CalcEnumExpression()</a>, <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classParserThread.xhtml#a83a5aafc48794c0b7855cc40c5ccc6cf">ParserThread::GetTemplateArgs()</a>, <a class="el" href="classParserThread.xhtml#ac899b2ea7761e46bb1f0d061f4d54691">ParserThread::HandleClass()</a>, <a class="el" href="classParserThread.xhtml#ab55fd2bae9203888c0178c4df058636c">ParserThread::HandleDefines()</a>, <a class="el" href="classParserThread.xhtml#a4a9c62b81b02895349a1633ff744e8f7">ParserThread::HandleEnum()</a>, <a class="el" href="classParserThread.xhtml#ae845814e7a52cd585d77065bc3c8d6cb">ParserThread::HandleUndefs()</a>, <a class="el" href="classParserThread.xhtml#a019c7ff4c9f800ccc583a41699ab5b5e">ParserThread::SkipAngleBraces()</a>, and <a class="el" href="classParserThread.xhtml#a65973704432137e051aec1541d3d7236">ParserThread::SkipBlock()</a>.</p>

</div>
</div>
<a class="anchor" id="ac7addae7ad10df1c1550739eaf786d89"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::GetToken </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Consume and return the current token string. </p>

<p>References <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a213f9af6ff22e26a0172b0d93676a5ac">m_PeekAvailable</a>, <a class="el" href="classTokenizer.xhtml#ad4b5ae52e84d7cd049f7938fbd62691d">m_PeekLineNumber</a>, <a class="el" href="classTokenizer.xhtml#a215e173a59256f49f2090d9b1490b5f3">m_PeekNestLevel</a>, <a class="el" href="classTokenizer.xhtml#af1a9e4495d88d4fa48e70477adae1cdf">m_PeekToken</a>, <a class="el" href="classTokenizer.xhtml#a88e1b4936a5b806a79ef6bfa828b3f69">m_PeekTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#afedfcfcf12801e07d247d87d57e18a00">m_Token</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#ab00cbabae219258b6205f30f2bf2fedb">m_UndoLineNumber</a>, <a class="el" href="classTokenizer.xhtml#ac909e921e9d3ed3b8387573665df9c7f">m_UndoNestLevel</a>, <a class="el" href="classTokenizer.xhtml#a165b332bb25e5d15c03ed3c50d3b6d0c">m_UndoTokenIndex</a>, and <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a997e91f1cbbf64ef9f8220e97dd7a240">ParserThread::CalcEnumExpression()</a>, <a class="el" href="classNativeParserBase.xhtml#ac41cce829ef11e3f5807abc9c1ae9c3f">NativeParserBase::ComputeCallTip()</a>, <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classParserThread.xhtml#a83a5aafc48794c0b7855cc40c5ccc6cf">ParserThread::GetTemplateArgs()</a>, <a class="el" href="classParserThread.xhtml#ac899b2ea7761e46bb1f0d061f4d54691">ParserThread::HandleClass()</a>, <a class="el" href="classParserThread.xhtml#a2ef3649a1395a1c492f38e6b167582b4">ParserThread::HandleConditionalArguments()</a>, <a class="el" href="classParserThread.xhtml#ab55fd2bae9203888c0178c4df058636c">ParserThread::HandleDefines()</a>, <a class="el" href="classParserThread.xhtml#a4a9c62b81b02895349a1633ff744e8f7">ParserThread::HandleEnum()</a>, <a class="el" href="classParserThread.xhtml#a650a609cbd9745ae8bad1951586a4bfa">ParserThread::HandleForLoopArguments()</a>, <a class="el" href="classParserThread.xhtml#a5815c1b5dc1e6f26b69324f2f1842ee0">ParserThread::HandleFunction()</a>, <a class="el" href="classParserThread.xhtml#aa644c4bf5a650801606724f2d4cc90d5">ParserThread::HandleIncludes()</a>, <a class="el" href="classParserThread.xhtml#a11bacf859a9b5a1a02c161331b0278f4">ParserThread::HandleNamespace()</a>, <a class="el" href="classParserThread.xhtml#aab08606cca9480bc978259ef8afc170d">ParserThread::HandleTypedef()</a>, <a class="el" href="classParserThread.xhtml#ae845814e7a52cd585d77065bc3c8d6cb">ParserThread::HandleUndefs()</a>, <a class="el" href="classParserThread.xhtml#a7a2c99d6130cdb0df26472b6cc8b6b16">ParserThread::ParseBufferForNamespaces()</a>, <a class="el" href="classParserThread.xhtml#a4ab0b49d18939e1879539d2de19e2aab">ParserThread::ParseBufferForUsingNamespace()</a>, <a class="el" href="classParserThread.xhtml#ad78eb9574aefe7f580aaa805f10fbe1b">ParserThread::ReadClsNames()</a>, <a class="el" href="classParserThread.xhtml#ae5961cd32c994fa68fec25baa4ee053a">ParserThread::ReadVarNames()</a>, <a class="el" href="classParserThread.xhtml#a019c7ff4c9f800ccc583a41699ab5b5e">ParserThread::SkipAngleBraces()</a>, <a class="el" href="classParserThread.xhtml#a65973704432137e051aec1541d3d7236">ParserThread::SkipBlock()</a>, and <a class="el" href="classParserThread.xhtml#a3324c3f8b45443f087071a758676134a">ParserThread::SkipToOneOfChars()</a>.</p>

</div>
</div>
<a class="anchor" id="ad44ad26a686ba76883b02d2d758f6101"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static wxStringHashMap&amp; Tokenizer::GetTokenReplacementsMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>return the macro replacement map </p>

<p>References <a class="el" href="classTokenizer.xhtml#a7c3843608b817dedc7fa21f5a0c457aa">s_Replacements</a>.</p>

<p>Referenced by <a class="el" href="classCCOptionsDlg.xhtml#a08c3f5c988600fa5ed5eecc577610bd6">CCOptionsDlg::CCOptionsDlg()</a>, and <a class="el" href="classCodeCompletion.xhtml#a16b4aef4161ca863bf3becaacad391e4">CodeCompletion::SaveTokenReplacements()</a>.</p>

</div>
</div>
<a class="anchor" id="afd511d462eb3685601dc98fc15a91b8b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::HandleConditionPreprocessor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559">PreprocessorType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>handle the preprocessor directive: #ifdef XXX or #endif or #if or #elif or... If conditional preprocessor handles correctly, return true, otherwise return false. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#adc703fa5cf3da9f48f56740ba6b3a697">IsMacroDefined()</a>, <a class="el" href="classTokenizer.xhtml#a9780b2202ef02a89fd1b6a087b614508">m_ExpressionResult</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a918eb8fea467374098e62d38caa3af9e">m_SavedLineNumber</a>, <a class="el" href="classTokenizer.xhtml#aa80eea79a36ecabea18086b6154b6d1f">m_SavedNestingLevel</a>, <a class="el" href="classTokenizer.xhtml#a1b8be9404c80f4c3121c6ccc6cef7f64">m_SavedTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a7130a6e4eab333551d3847b638e9238a">m_TokenizerOptions</a>, <a class="el" href="classTokenizer.xhtml#ab00cbabae219258b6205f30f2bf2fedb">m_UndoLineNumber</a>, <a class="el" href="classTokenizer.xhtml#ac909e921e9d3ed3b8387573665df9c7f">m_UndoNestLevel</a>, <a class="el" href="classTokenizer.xhtml#a165b332bb25e5d15c03ed3c50d3b6d0c">m_UndoTokenIndex</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a6b429a39f396336c1cdcab96a9f580c7">ptElif</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559ab9889c6425e0e45fe8b651480ff9c91c">ptElifdef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a263a030a6d7924f95447ee3103c64ff2">ptElifndef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559aab909ea903a0e19d80d977aba670ad74">ptElse</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a213cc131000dd34668b61b18b8fac61c">ptEndif</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a91fbf147986e5abda54df5d6cf81aff9">ptIf</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a466eff97f6ab122bf171cc376a88bc31">ptIfdef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559a427bd372c575b4dd8920164725a9cfc4">ptIfndef</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559ae9a0b339aa15a161278071ed4a1b4876">ptOthers</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>, and <a class="el" href="tokenizer_8h.xhtml#a8bef33981dbf50f4b11f557d6dccf625">TokenizerOptions::wantPreprocessor</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, and <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>.</p>

</div>
</div>
<a class="anchor" id="aa5d2000b5492f2c4e603ccddaac56522"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::Init </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>wxEmptyString</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classLoaderBase.xhtml">LoaderBase</a> *&#160;</td>
          <td class="paramname"><em>loader</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initialize the buffer by opening a file through a loader, this function copy the contents from the loader's buffer to its own buffer, so after that, we can safely delete the loader after this function call </p>

<p>References <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenTree.xhtml#a82be97b7d49c4052a2ca598c17a72f5e">TokenTree::GetFileIndex()</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#ac633d3b00073cfd51b51778f48353be7">m_FileIdx</a>, <a class="el" href="classTokenizer.xhtml#aa7ec19d970a7c6491b3b4b02aa65b7b7">m_Filename</a>, <a class="el" href="classTokenizer.xhtml#a456b81e262e9543fa1c0c89f5e886f94">m_IsOK</a>, <a class="el" href="classTokenizer.xhtml#a06ce2a825c6431604a9afd76d7c66a0b">m_Loader</a>, <a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a>, <a class="el" href="classTokenizer.xhtml#ae07cdfdaf21627535b35b841c520081c">ReadFile()</a>, <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>, <a class="el" href="tokenizer_8cpp.xhtml#a0d6a0c2b7de6206fb199865411068c8f">TRACE2</a>, and <a class="el" href="tokenizer_8cpp.xhtml#af9a4f8834e79d0bc11626e018be76634">TRACE2_SET_FLAG</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#abda91d29be83e7900ad7a5c18cfe6435">ParserThread::InitTokenizer()</a>, and <a class="el" href="classTokenizer.xhtml#a6b09a4a30dd22cf37df53c56ce19d1a8">Tokenizer()</a>.</p>

</div>
</div>
<a class="anchor" id="ad9e5082fade9bdcc47bf90f483a37f69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::InitFromBuffer </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>fileOfBuffer</em> = <code>wxEmptyString</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>initLineNumber</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initialize the buffer by directly using a wxString's content. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">initLineNumber</td><td>the start line of the buffer, usually the parser try to parse a function body, so the line information of each local variable tokens are correct. </td></tr>
    <tr><td class="paramname">buffer</td><td>text used for parsing </td></tr>
    <tr><td class="paramname">fileOfBuffer</td><td>the file name where the buffer come from. </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenTree.xhtml#a82be97b7d49c4052a2ca598c17a72f5e">TokenTree::GetFileIndex()</a>, <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#ac633d3b00073cfd51b51778f48353be7">m_FileIdx</a>, <a class="el" href="classTokenizer.xhtml#aa7ec19d970a7c6491b3b4b02aa65b7b7">m_Filename</a>, <a class="el" href="classTokenizer.xhtml#a456b81e262e9543fa1c0c89f5e886f94">m_IsOK</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, and <a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a>.</p>

<p>Referenced by <a class="el" href="classNativeParserBase.xhtml#ac41cce829ef11e3f5807abc9c1ae9c3f">NativeParserBase::ComputeCallTip()</a>, <a class="el" href="classParserThread.xhtml#a2ef3649a1395a1c492f38e6b167582b4">ParserThread::HandleConditionalArguments()</a>, <a class="el" href="classParserThread.xhtml#a650a609cbd9745ae8bad1951586a4bfa">ParserThread::HandleForLoopArguments()</a>, <a class="el" href="classParserThread.xhtml#abda91d29be83e7900ad7a5c18cfe6435">ParserThread::InitTokenizer()</a>, <a class="el" href="classParserThread.xhtml#a7a2c99d6130cdb0df26472b6cc8b6b16">ParserThread::ParseBufferForNamespaces()</a>, and <a class="el" href="classParserThread.xhtml#a4ab0b49d18939e1879539d2de19e2aab">ParserThread::ParseBufferForUsingNamespace()</a>.</p>

</div>
</div>
<a class="anchor" id="a0ed03f311660d8763c3fefa3a7de9898"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::IsBackslashBeforeEOL </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check the previous char before EOL is a backslash, call this function in the condition that the CurrentChar is '<br />
', here we have two cases: ......\<br />
...... ^&ndash;current char, this is DOS style EOL ......\<br />
...... ^&ndash;current char, this is Linux style EOL </p>

<p>References <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, and <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, and <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>.</p>

</div>
</div>
<a class="anchor" id="a19475c7b83ffc0fe88feb8b1d011477b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::IsEOF </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check whether the <a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> reaches the end of the buffer (file) </p>

<p>References <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, and <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>, <a class="el" href="classTokenizer.xhtml#a2905a9697b5ae1bf0f50f75c168c654a">SkipToStringEnd()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, and <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>.</p>

</div>
</div>
<a class="anchor" id="a4d7d08ad92ba1b08e1691f1d97035611"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::IsEscapedChar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check the current character is a C-Escape character in a string. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, and <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a2905a9697b5ae1bf0f50f75c168c654a">SkipToStringEnd()</a>.</p>

</div>
</div>
<a class="anchor" id="adc703fa5cf3da9f48f56740ba6b3a697"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::IsMacroDefined </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>If the next token string is macro usage, return true </p>

<p>References <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>, <a class="el" href="token_8h.xhtml#a7a47dce04185ce6008048622cc792f25aa0ca06d013acd15e8fd2be8cb57c2f20">tkMacroDef</a>, and <a class="el" href="classTokenTree.xhtml#a17bd02412b63df67ac246f89c4ad7997">TokenTree::TokenExists()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, and <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>.</p>

</div>
</div>
<a class="anchor" id="aa13432af2028be6fbc3a82ea0ae4ed6c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::IsOK </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>If the buffer is correctly loaded, this function return true. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a456b81e262e9543fa1c0c89f5e886f94">m_IsOK</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a87e5624dfc192efb0bba2d69f4be7214">ParserThread::Parse()</a>, <a class="el" href="classParserThread.xhtml#a7a2c99d6130cdb0df26472b6cc8b6b16">ParserThread::ParseBufferForNamespaces()</a>, and <a class="el" href="classParserThread.xhtml#a4ab0b49d18939e1879539d2de19e2aab">ParserThread::ParseBufferForUsingNamespace()</a>.</p>

</div>
</div>
<a class="anchor" id="a9443936dc27df9f31c9c1049378979fd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::IsSkippingUnwantedTokens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Checking the TokenizerState </p>

<p>References <a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a>, and <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845ac3caeb8004b72c8bdcad39b685ad0401">tsSkipUnWanted</a>.</p>

</div>
</div>
<a class="anchor" id="a45b4353b4bacf5a7afa487b6e2301008"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Tokenizer::KMP_Find </td>
          <td>(</td>
          <td class="paramtype">const wxChar *&#160;</td>
          <td class="paramname"><em>text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxChar *&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>patternLen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>KMP find, get the first position, if find nothing, return -1 </p>

<p>References <a class="el" href="classTokenizer.xhtml#a3b859309a0024c309c9a0331e7456d51">KMP_GetNextVal()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#abe48f27266c7963302cd6057a65b8949">GetFirstTokenPosition()</a>.</p>

</div>
</div>
<a class="anchor" id="a3b859309a0024c309c9a0331e7456d51"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::KMP_GetNextVal </td>
          <td>(</td>
          <td class="paramtype">const wxChar *&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>next</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Just for KMP find </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a45b4353b4bacf5a7afa487b6e2301008">KMP_Find()</a>.</p>

</div>
</div>
<a class="anchor" id="a87c2f2339823fe5e8666ec97ff1f9302"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::MoveToNextChar </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>amount</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move to the next character in the buffer, amount defines the steps (by default, it is one) </p>

<p>References <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, and <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, <a class="el" href="classTokenizer.xhtml#aedd3de1dabf8721b99635a299221ecc3">SkipToChar()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, <a class="el" href="classTokenizer.xhtml#a2905a9697b5ae1bf0f50f75c168c654a">SkipToStringEnd()</a>, <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>, and <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>.</p>

</div>
</div>
<a class="anchor" id="a12cb86a8a2732a6173cc2034a1b4dc25"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxChar Tokenizer::NextChar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return (peek) the next character </p>

<p>References <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, and <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, and <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>.</p>

</div>
</div>
<a class="anchor" id="a2eca266878979398035defc786898aab"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::NotEOF </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>return true if it is Not the end of buffer </p>

<p>References <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, and <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classParserThread.xhtml#a7a2c99d6130cdb0df26472b6cc8b6b16">ParserThread::ParseBufferForNamespaces()</a>, <a class="el" href="classParserThread.xhtml#a4ab0b49d18939e1879539d2de19e2aab">ParserThread::ParseBufferForUsingNamespace()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#aedd3de1dabf8721b99635a299221ecc3">SkipToChar()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>, <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, and <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>.</p>

</div>
</div>
<a class="anchor" id="a736574152ebabf5ab26241104780c775"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::PeekToken </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Do a "look ahead", and return the next token string. </p>

<p>References <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a213f9af6ff22e26a0172b0d93676a5ac">m_PeekAvailable</a>, <a class="el" href="classTokenizer.xhtml#ad4b5ae52e84d7cd049f7938fbd62691d">m_PeekLineNumber</a>, <a class="el" href="classTokenizer.xhtml#a215e173a59256f49f2090d9b1490b5f3">m_PeekNestLevel</a>, <a class="el" href="classTokenizer.xhtml#af1a9e4495d88d4fa48e70477adae1cdf">m_PeekToken</a>, <a class="el" href="classTokenizer.xhtml#a88e1b4936a5b806a79ef6bfa828b3f69">m_PeekTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a918eb8fea467374098e62d38caa3af9e">m_SavedLineNumber</a>, <a class="el" href="classTokenizer.xhtml#aa80eea79a36ecabea18086b6154b6d1f">m_SavedNestingLevel</a>, <a class="el" href="classTokenizer.xhtml#a1b8be9404c80f4c3121c6ccc6cef7f64">m_SavedTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, and <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>.</p>

<p>Referenced by <a class="el" href="classNativeParserBase.xhtml#ac41cce829ef11e3f5807abc9c1ae9c3f">NativeParserBase::ComputeCallTip()</a>, <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classParserThread.xhtml#ac899b2ea7761e46bb1f0d061f4d54691">ParserThread::HandleClass()</a>, <a class="el" href="classParserThread.xhtml#a2ef3649a1395a1c492f38e6b167582b4">ParserThread::HandleConditionalArguments()</a>, <a class="el" href="classParserThread.xhtml#a4a9c62b81b02895349a1633ff744e8f7">ParserThread::HandleEnum()</a>, <a class="el" href="classParserThread.xhtml#a650a609cbd9745ae8bad1951586a4bfa">ParserThread::HandleForLoopArguments()</a>, <a class="el" href="classParserThread.xhtml#a5815c1b5dc1e6f26b69324f2f1842ee0">ParserThread::HandleFunction()</a>, <a class="el" href="classParserThread.xhtml#a11bacf859a9b5a1a02c161331b0278f4">ParserThread::HandleNamespace()</a>, <a class="el" href="classParserThread.xhtml#aab08606cca9480bc978259ef8afc170d">ParserThread::HandleTypedef()</a>, <a class="el" href="classParserThread.xhtml#a7a2c99d6130cdb0df26472b6cc8b6b16">ParserThread::ParseBufferForNamespaces()</a>, and <a class="el" href="classParserThread.xhtml#a4ab0b49d18939e1879539d2de19e2aab">ParserThread::ParseBufferForUsingNamespace()</a>.</p>

</div>
</div>
<a class="anchor" id="a390765d4a92dccf76213179d341c8f10"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxChar Tokenizer::PreviousChar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return (peek) the previous character </p>

<p>References <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, and <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL()</a>, <a class="el" href="classTokenizer.xhtml#a4d7d08ad92ba1b08e1691f1d97035611">IsEscapedChar()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, and <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>.</p>

</div>
</div>
<a class="anchor" id="ae07cdfdaf21627535b35b841c520081c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::ReadFile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Read a file, and fill the m_Buffer </p>

<p>References <a class="el" href="globals_8h.xhtml#a32a88ee33e77a5ee2b2baa010aed556d">cbRead()</a>, <a class="el" href="classLoaderBase.xhtml#a3527895c1c884e1bd8b393ca8d5ceac3">LoaderBase::FileName()</a>, <a class="el" href="classLoaderBase.xhtml#a99ef45eb9732b540ffcc9e67594767bd">LoaderBase::GetData()</a>, <a class="el" href="classLoaderBase.xhtml#aa4f022f3d8b7bc8e0ecedbc1fe6e2a53">LoaderBase::GetLength()</a>, <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#aa7ec19d970a7c6491b3b4b02aa65b7b7">m_Filename</a>, and <a class="el" href="classTokenizer.xhtml#a06ce2a825c6431604a9afd76d7c66a0b">m_Loader</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>.</p>

</div>
</div>
<a class="anchor" id="ae378c62367917203a6e39ed35d8c7447"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::ReadParentheses </td>
          <td>(</td>
          <td class="paramtype">wxString &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>read a string from '(' to ')', note that inner parentheses considered </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559ae9a0b339aa15a161278071ed4a1b4876">ptOthers</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a2905a9697b5ae1bf0f50f75c168c654a">SkipToStringEnd()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a3733bafa796a5cee1c24e10b99cff9f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::ReadToEOL </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>nestBraces</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>stripUnneeded</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>return the string from the current position to the end of current line, in most case, this function is used in handling #define, use with care outside this class! </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nestBraces</td><td>true if you still need to count the '{' and '}' levels </td></tr>
    <tr><td class="paramname">stripUnneeded</td><td>true if you are going to remove comments and compression spaces(two or more spaces should become one space) </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#ab55fd2bae9203888c0178c4df058636c">ParserThread::HandleDefines()</a>.</p>

</div>
</div>
<a class="anchor" id="a1b3e4519a607a99b737e199d548ba5a4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Tokenizer::RemoveReplacementString </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>from</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Remove a macro replacement rule </p>

<p>References <a class="el" href="classTokenizer.xhtml#a7c3843608b817dedc7fa21f5a0c457aa">s_Replacements</a>.</p>

<p>Referenced by <a class="el" href="classCCOptionsDlg.xhtml#a98e00aaab64c191d11555be024c8133d">CCOptionsDlg::OnDelRepl()</a>.</p>

</div>
</div>
<a class="anchor" id="ac929769563e5b389e6444568d06eb6ef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::ReplaceBufferText </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Backward buffer replacement for re-parsing</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>the new text going to replace some other text on the m_Buffer</td></tr>
  </table>
  </dd>
</dl>
<p><a href="http://forums.codeblocks.org/index.php/topic,13384.msg90391.html#msg90391">http://forums.codeblocks.org/index.php/topic,13384.msg90391.html#msg90391</a></p>
<p>Macro expansion is just replace some characters in the m_Buffer.</p>
<p>xxxxxxxxxAAAA(u,v)yyyyyyyyy ^---&mdash; m_TokenIndex (anchor point)</p>
<p>For example, the above is a wxChar Array(m_Buffer), a macro expansion is needed to replace "AAAA(u,v)" to some new text. We just do a "backward" text replace here. Before the replacement, m_TokenIndex point to the next char of ")" in "AAAA(u,v)" (We say it as an anchor point), so the new buffer becomes:</p>
<p>xxxNNNNNNNNNNNNNNNyyyyyyyyy ^ &lt;--------&mdash; ^ m_TokenIndex was moved backward</p>
<p>Note that "NNNNNNNNNNNNNNN" is the new text. The m_TokenIndex was moved backward to the beginning of the new added text. if the new text is small enough, then m_Buffer's length do not need to increase. The situation when our m_Buffer's length need to be increased is that the new text is too long, so the buffer before "anchor point" can not hold the new text, this way, m_Buffer's length will adjusted. like below:</p>
<p>NNNNNNNNNNNNNNNNNNNNNNyyyyyyyyy ^&mdash;m_TokenIndex </p>

<p>References <a class="el" href="classTokenizer.xhtml#a904820ec391c983bca88f3dc7358ddc1">m_Buffer</a>, <a class="el" href="classTokenizer.xhtml#abcd0287624f5ab04641a695e126d3265">m_BufferLen</a>, <a class="el" href="classTokenizer.xhtml#aea2e7b0795fc4ef6a5704e475da120f4">m_FirstRemainingLength</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a213f9af6ff22e26a0172b0d93676a5ac">m_PeekAvailable</a>, <a class="el" href="classTokenizer.xhtml#aeef805501531537a551331a4b42a6054">m_RepeatReplaceCount</a>, <a class="el" href="classTokenizer.xhtml#a918eb8fea467374098e62d38caa3af9e">m_SavedLineNumber</a>, <a class="el" href="classTokenizer.xhtml#aa80eea79a36ecabea18086b6154b6d1f">m_SavedNestingLevel</a>, <a class="el" href="classTokenizer.xhtml#a1b8be9404c80f4c3121c6ccc6cef7f64">m_SavedTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#ab00cbabae219258b6205f30f2bf2fedb">m_UndoLineNumber</a>, <a class="el" href="classTokenizer.xhtml#ac909e921e9d3ed3b8387573665df9c7f">m_UndoNestLevel</a>, <a class="el" href="classTokenizer.xhtml#a165b332bb25e5d15c03ed3c50d3b6d0c">m_UndoTokenIndex</a>, <a class="el" href="tokenizer_8cpp.xhtml#adba63a4a9e7bd5f4bc2bb72fe12dc316">s_MaxRepeatReplaceCount</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a997e91f1cbbf64ef9f8220e97dd7a240">ParserThread::CalcEnumExpression()</a>, <a class="el" href="classTokenizer.xhtml#a117194417bb717e020039e91a0e3affe">GetMacroExpandedText()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classParserThread.xhtml#a11bacf859a9b5a1a02c161331b0278f4">ParserThread::HandleNamespace()</a>, and <a class="el" href="classTokenizer.xhtml#a1586b3f6ef6979c9938f1205a9749e47">ReplaceMacroUsage()</a>.</p>

</div>
</div>
<a class="anchor" id="a1586b3f6ef6979c9938f1205a9749e47"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::ReplaceMacroUsage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classToken.xhtml">Token</a> *&#160;</td>
          <td class="paramname"><em>tk</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get expanded text for the current macro usage, then replace buffer for re-parsing </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tk</td><td>the macro definition token </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if macro expansion successes, thus buffer is really changed and m_TokenIndex moved backward a bit, and peek status get cleared Both the function like macro or variable like macro usage can be handled in this function. </dd></dl>

<p>References <a class="el" href="classTokenizer.xhtml#a117194417bb717e020039e91a0e3affe">GetMacroExpandedText()</a>, and <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classParserThread.xhtml#a997e91f1cbbf64ef9f8220e97dd7a240">ParserThread::CalcEnumExpression()</a>, <a class="el" href="classNativeParserBase.xhtml#ac41cce829ef11e3f5807abc9c1ae9c3f">NativeParserBase::ComputeCallTip()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, and <a class="el" href="classParserThread.xhtml#a36ab4001b8842ae1bea7452474aa63c3">ParserThread::HandleMacroExpansion()</a>.</p>

</div>
</div>
<a class="anchor" id="a531bbc786a41aa5fefc9ad4dc8cc24e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::RestoreNestingLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Restore the brace level </p>

<p>References <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, and <a class="el" href="classTokenizer.xhtml#aa80eea79a36ecabea18086b6154b6d1f">m_SavedNestingLevel</a>.</p>

</div>
</div>
<a class="anchor" id="acf2c13aafcb90ecf14536957c94cd350"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::SaveNestingLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Save the brace "{" level, the parser might need to ignore the nesting level in some cases </p>

<p>References <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, and <a class="el" href="classTokenizer.xhtml#aa80eea79a36ecabea18086b6154b6d1f">m_SavedNestingLevel</a>.</p>

</div>
</div>
<a class="anchor" id="a29fcd3e97359af69875dd7b2fd4c6261"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::SetLastTokenIdx </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>tokenIdx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>a <a class="el" href="classToken.xhtml">Token</a> is added, this function also add doxygen style document attached to the <a class="el" href="classToken.xhtml">Token</a> </p>

<p>References <a class="el" href="classTokenTree.xhtml#a6bc3f6ca6fdc2f3ebda88c5641b8eacf">TokenTree::AppendDocumentation()</a>, <a class="el" href="classTokenizer.xhtml#a9780b2202ef02a89fd1b6a087b614508">m_ExpressionResult</a>, <a class="el" href="classTokenizer.xhtml#a26f4e66b19304d32ef750d8bd89bdf30">m_LastTokenIdx</a>, <a class="el" href="classTokenizer.xhtml#a82725839dff7d9b965d65cc20a578dce">m_NextTokenDoc</a>, and <a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#ae1def46bdb504975217819bb1049d9fd">ParserThread::DoAddToken()</a>.</p>

</div>
</div>
<a class="anchor" id="aecd704eb77201aecc908571b84ed2a3e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Tokenizer::SetReplacementString </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>to</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Add one "replacement rule", this is just a simple way of defining a macro definition. The rule composites two strings: the key string and the value string. When the <a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> gets an identifier kind string, it is lookuped in the replacement rules map, if it matches one rule, the rule's value string will be returned instead.. Other rules are some function like macro definition, E.g. to replace the "_GLIBCXX_BEGIN_NAMESPACE(std)" to "namespace std {" We can use: <a class="el" href="classTokenizer.xhtml#aecd704eb77201aecc908571b84ed2a3e">Tokenizer::SetReplacementString</a>(_T("_GLIBCXX_BEGIN_NAMESPACE"), _T("+namespace")); See more details in <a class="el" href="classCodeCompletion.xhtml#af15c5ac891e6d76ebd2d108be5386570">CodeCompletion::LoadTokenReplacements()</a> function. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">from</td><td>the matching key string </td></tr>
    <tr><td class="paramname">to</td><td>the matching value string </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#a7c3843608b817dedc7fa21f5a0c457aa">s_Replacements</a>.</p>

<p>Referenced by <a class="el" href="classCCOptionsDlg.xhtml#ace3de0d25c0f91b97b346e40d61dc47c">CCOptionsDlg::OnAddRepl()</a>, and <a class="el" href="classCCOptionsDlg.xhtml#a30b130e8f18d894c52098e6791f600e3">CCOptionsDlg::OnEditRepl()</a>.</p>

</div>
</div>
<a class="anchor" id="a0d9b0da5d3c5a5a82772fa181687deb3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::SetState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845">TokenizerState</a>&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the <a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> skipping options. E.g. sometimes, we need to skip the statement after "=", but sometimes, we should disable this options, see more details on TokenizerState. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a997e91f1cbbf64ef9f8220e97dd7a240">ParserThread::CalcEnumExpression()</a>, <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classParserThread.xhtml#a83a5aafc48794c0b7855cc40c5ccc6cf">ParserThread::GetTemplateArgs()</a>, <a class="el" href="classParserThread.xhtml#ac899b2ea7761e46bb1f0d061f4d54691">ParserThread::HandleClass()</a>, <a class="el" href="classParserThread.xhtml#ab55fd2bae9203888c0178c4df058636c">ParserThread::HandleDefines()</a>, <a class="el" href="classParserThread.xhtml#a4a9c62b81b02895349a1633ff744e8f7">ParserThread::HandleEnum()</a>, <a class="el" href="classParserThread.xhtml#a11bacf859a9b5a1a02c161331b0278f4">ParserThread::HandleNamespace()</a>, <a class="el" href="classParserThread.xhtml#ae845814e7a52cd585d77065bc3c8d6cb">ParserThread::HandleUndefs()</a>, <a class="el" href="classParserThread.xhtml#a7a2c99d6130cdb0df26472b6cc8b6b16">ParserThread::ParseBufferForNamespaces()</a>, <a class="el" href="classParserThread.xhtml#a019c7ff4c9f800ccc583a41699ab5b5e">ParserThread::SkipAngleBraces()</a>, and <a class="el" href="classParserThread.xhtml#a65973704432137e051aec1541d3d7236">ParserThread::SkipBlock()</a>.</p>

</div>
</div>
<a class="anchor" id="ab2d02ca538bc1f189147da232ca3193d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::SetTokenizerOption </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>wantPreprocessor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>storeDocumentation</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Handle condition preprocessor and store documentation or not </p>

<p>References <a class="el" href="classTokenizer.xhtml#a7130a6e4eab333551d3847b638e9238a">m_TokenizerOptions</a>, <a class="el" href="tokenizer_8h.xhtml#ac5291d358b16470514572ab8ef1d427e">TokenizerOptions::storeDocumentation</a>, and <a class="el" href="tokenizer_8h.xhtml#a8bef33981dbf50f4b11f557d6dccf625">TokenizerOptions::wantPreprocessor</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#aa0954aedee321fdedc4e49ca4c75482c">ParserThread::ParserThread()</a>.</p>

</div>
</div>
<a class="anchor" id="a6725a0177157fc77b863c3102705cc55"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipBlock </td>
          <td>(</td>
          <td class="paramtype">const wxChar &amp;&#160;</td>
          <td class="paramname"><em>ch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip the blocks like &lt;&gt;, {}, [], () </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, and <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, and <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>.</p>

</div>
</div>
<a class="anchor" id="a446e3f3933eddafe1c327cad72b3033f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipComment </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip the C/C++ comment </p><dl class="section return"><dt>Returns</dt><dd>true if we do move m_TokenIndex When C comment is handled, m_TokenIndex point to the char AFTER the '/' When C++ comment is handled, m_TokenIndex point to '<br />
' </dd></dl>

<p>References <a class="el" href="classTokenTree.xhtml#a6bc3f6ca6fdc2f3ebda88c5641b8eacf">TokenTree::AppendDocumentation()</a>, <a class="el" href="config-testsuite_8cpp.xhtml#a07f04e4e679e17d1f1c2f0a60cb74aaa">c</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a9780b2202ef02a89fd1b6a087b614508">m_ExpressionResult</a>, <a class="el" href="classTokenizer.xhtml#a26f4e66b19304d32ef750d8bd89bdf30">m_LastTokenIdx</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a82725839dff7d9b965d65cc20a578dce">m_NextTokenDoc</a>, <a class="el" href="classTokenizer.xhtml#a7130a6e4eab333551d3847b638e9238a">m_TokenizerOptions</a>, <a class="el" href="classTokenizer.xhtml#a074d189d560cfa8a66d2abcfe7e45a71">m_TokenTree</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#aedd3de1dabf8721b99635a299221ecc3">SkipToChar()</a>, <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>, <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>, <a class="el" href="tokenizer_8h.xhtml#ac5291d358b16470514572ab8ef1d427e">TokenizerOptions::storeDocumentation</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#adc703fa5cf3da9f48f56740ba6b3a697">IsMacroDefined()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, and <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>.</p>

</div>
</div>
<a class="anchor" id="a82319cf803b161f1f850a46a211ed41c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip the string literal(enclosed in double quotes) or character literal(enclosed in single quotes). </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, and <a class="el" href="classTokenizer.xhtml#a2905a9697b5ae1bf0f50f75c168c654a">SkipToStringEnd()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, and <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>.</p>

</div>
</div>
<a class="anchor" id="aedd3de1dabf8721b99635a299221ecc3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipToChar </td>
          <td>(</td>
          <td class="paramtype">const wxChar &amp;&#160;</td>
          <td class="paramname"><em>ch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip character until we meet a ch </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, and <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, and <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>.</p>

</div>
</div>
<a class="anchor" id="a9744b9b8f1edc3b01636f8e72d93fe3a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::SkipToEndConditionPreprocessor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip to the #endif conditional preprocessor directive. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, and <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, and <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>.</p>

</div>
</div>
<a class="anchor" id="ab767d45e38396a43059010e7b2721fea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipToEOL </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>nestBraces</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Skip from the current position to the end of line. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nestBraces</td><td>if true, we should still counting the brace levels in this function. </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classParserThread.xhtml#ae845814e7a52cd585d77065bc3c8d6cb">ParserThread::HandleUndefs()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, and <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>.</p>

</div>
</div>
<a class="anchor" id="a906abdace9ee254f514617e9f4460708"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipToInlineCommentEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Skip to then end of the C++ style comment </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>, <a class="el" href="classTokenizer.xhtml#aedd3de1dabf8721b99635a299221ecc3">SkipToChar()</a>, and <a class="el" href="tokenizer_8cpp.xhtml#a1c9f8c7ecc64a760dc3ac03706556ea9">TRACE</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>.</p>

</div>
</div>
<a class="anchor" id="a74009fa8bbcaf3b9fd14b8ac3970748a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::SkipToNextConditionPreprocessor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip to the next conditional preprocessor directive branch. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, and <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>.</p>

</div>
</div>
<a class="anchor" id="aa9a084f22b37f907c7c1d80b601dd227"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipToOneOfChars </td>
          <td>(</td>
          <td class="paramtype">const wxChar *&#160;</td>
          <td class="paramname"><em>chars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>supportNesting</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>skipPreprocessor</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>skipAngleBrace</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip characters until we meet any characters in a wxChar Array. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">supportNesting</td><td>handling brace level in this function. </td></tr>
    <tr><td class="paramname">skipPreprocessor</td><td>handling preprocessor directive. </td></tr>
    <tr><td class="paramname">skipAngleBrace</td><td>if this value is false, we will not do a match of "&lt; &gt; " </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="classTokenizer.xhtml#ad603a21c2095c3d9c4b1bce525b3c154">CharInString()</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>, and <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, and <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>.</p>

</div>
</div>
<a class="anchor" id="a2905a9697b5ae1bf0f50f75c168c654a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipToStringEnd </td>
          <td>(</td>
          <td class="paramtype">const wxChar &amp;&#160;</td>
          <td class="paramname"><em>ch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move to the end of string literal or character literal, the m_TokenIndex will at the closing quote character. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ch</td><td>is a character either double quote or single quote </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if we reach the closing quote character </dd></dl>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a4d7d08ad92ba1b08e1691f1d97035611">IsEscapedChar()</a>, and <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, and <a class="el" href="classTokenizer.xhtml#a82319cf803b161f1f850a46a211ed41c">SkipString()</a>.</p>

</div>
</div>
<a class="anchor" id="a130fc36a6ae8bc85595a448b2431bcaa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipUnwanted </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>skips comments, assignments, preprocessor etc. Eg, sometimes, it will skip the statement after the "=" statement (depend on the TokenizerState value). </p>

<p>References <a class="el" href="config-testsuite_8cpp.xhtml#a07f04e4e679e17d1f1c2f0a60cb74aaa">c</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="tokenizer_8h.xhtml#a7ac4e4a2f01cbd6f69d5b33dd7255559ae9a0b339aa15a161278071ed4a1b4876">ptOthers</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#aa9a084f22b37f907c7c1d80b601dd227">SkipToOneOfChars()</a>, <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>, <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845a90c671ff08f1cd8eb2ef989a60b0a664">tsSkipEqual</a>, <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845abca74c4c880a5e2d38e00462d57a0efd">tsSkipQuestion</a>, and <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845a665e519893f5c1000de0f5f7b2bf6f86">tsSkipSubScrip</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, and <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a99d2f91aa84112de86fb090730d73a75"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SkipWhiteSpace </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip any "tab" "white-space" </p>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, and <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#adc703fa5cf3da9f48f56740ba6b3a697">IsMacroDefined()</a>, <a class="el" href="classTokenizer.xhtml#a6725a0177157fc77b863c3102705cc55">SkipBlock()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a9744b9b8f1edc3b01636f8e72d93fe3a">SkipToEndConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, and <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>.</p>

</div>
</div>
<a class="anchor" id="a14327d3879c1c138e1b6e30508f9c939"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::SplitArguments </td>
          <td>(</td>
          <td class="paramtype">wxArrayString &amp;&#160;</td>
          <td class="paramname"><em>results</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Split the macro arguments, and store them in results, when calling this function, we expect that m_TokenIndex point to the opening parthense, or some spaces befor the opening parthense. such as below</p>
<p>..... ABC ( xxx, yyy ) zzz ..... ^-----&mdash;m_TokenIndex</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">results</td><td>in the above example, the result contains two items (xxx and yyy) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>false if arguments (the parenthesis) are not found. </dd></dl>

<p>References <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a23022c55329b9d0594c28fe7e61ff75f">m_State</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#a99d2f91aa84112de86fb090730d73a75">SkipWhiteSpace()</a>, and <a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845a80da3efdca4e1162abce8315798a8791">tsReadRawExpression</a>.</p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a117194417bb717e020039e91a0e3affe">GetMacroExpandedText()</a>.</p>

</div>
</div>
<a class="anchor" id="ac7f992387098dd3a486a9c994c9d5d7f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Tokenizer::UngetToken </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Undo the GetToken. </p>

<p>References <a class="el" href="classTokenizer.xhtml#a52c4a2537f4689107464a1758ff82b83">m_LineNumber</a>, <a class="el" href="classTokenizer.xhtml#a2d20d25188897957cff8a17daaba6669">m_NestLevel</a>, <a class="el" href="classTokenizer.xhtml#a213f9af6ff22e26a0172b0d93676a5ac">m_PeekAvailable</a>, <a class="el" href="classTokenizer.xhtml#ad4b5ae52e84d7cd049f7938fbd62691d">m_PeekLineNumber</a>, <a class="el" href="classTokenizer.xhtml#a215e173a59256f49f2090d9b1490b5f3">m_PeekNestLevel</a>, <a class="el" href="classTokenizer.xhtml#af1a9e4495d88d4fa48e70477adae1cdf">m_PeekToken</a>, <a class="el" href="classTokenizer.xhtml#a88e1b4936a5b806a79ef6bfa828b3f69">m_PeekTokenIndex</a>, <a class="el" href="classTokenizer.xhtml#afedfcfcf12801e07d247d87d57e18a00">m_Token</a>, <a class="el" href="classTokenizer.xhtml#a5ad789658ddbf09bdfe7291564632c7f">m_TokenIndex</a>, <a class="el" href="classTokenizer.xhtml#ab00cbabae219258b6205f30f2bf2fedb">m_UndoLineNumber</a>, <a class="el" href="classTokenizer.xhtml#ac909e921e9d3ed3b8387573665df9c7f">m_UndoNestLevel</a>, and <a class="el" href="classTokenizer.xhtml#a165b332bb25e5d15c03ed3c50d3b6d0c">m_UndoTokenIndex</a>.</p>

<p>Referenced by <a class="el" href="classParserThread.xhtml#a997e91f1cbbf64ef9f8220e97dd7a240">ParserThread::CalcEnumExpression()</a>, <a class="el" href="classParserThread.xhtml#a991cc89e41f0fbff132e3f09585ea70d">ParserThread::DoParse()</a>, <a class="el" href="classParserThread.xhtml#a83a5aafc48794c0b7855cc40c5ccc6cf">ParserThread::GetTemplateArgs()</a>, <a class="el" href="classParserThread.xhtml#ac899b2ea7761e46bb1f0d061f4d54691">ParserThread::HandleClass()</a>, <a class="el" href="classParserThread.xhtml#a4a9c62b81b02895349a1633ff744e8f7">ParserThread::HandleEnum()</a>, <a class="el" href="classParserThread.xhtml#a5815c1b5dc1e6f26b69324f2f1842ee0">ParserThread::HandleFunction()</a>, <a class="el" href="classParserThread.xhtml#aab08606cca9480bc978259ef8afc170d">ParserThread::HandleTypedef()</a>, <a class="el" href="classParserThread.xhtml#ad78eb9574aefe7f580aaa805f10fbe1b">ParserThread::ReadClsNames()</a>, and <a class="el" href="classParserThread.xhtml#a019c7ff4c9f800ccc583a41699ab5b5e">ParserThread::SkipAngleBraces()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a904820ec391c983bca88f3dc7358ddc1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::m_Buffer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Buffer content, all the lexical analysis is done on this </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>, <a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL()</a>, <a class="el" href="classTokenizer.xhtml#a4d7d08ad92ba1b08e1691f1d97035611">IsEscapedChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>, <a class="el" href="classTokenizer.xhtml#ae07cdfdaf21627535b35b841c520081c">ReadFile()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, and <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>.</p>

</div>
</div>
<a class="anchor" id="abcd0287624f5ab04641a695e126d3265"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_BufferLen</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Buffer length </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a4d7d08ad92ba1b08e1691f1d97035611">IsEscapedChar()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>, <a class="el" href="classTokenizer.xhtml#ae07cdfdaf21627535b35b841c520081c">ReadFile()</a>, and <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>.</p>

</div>
</div>
<a class="anchor" id="a9780b2202ef02a89fd1b6a087b614508"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::stack&lt;bool&gt; Tokenizer::m_ExpressionResult</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Calculate <a class="el" href="classExpression.xhtml">Expression</a>'s result, stack for Shunting-yard algorithm </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a29fcd3e97359af69875dd7b2fd4c6261">SetLastTokenIdx()</a>, and <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>.</p>

</div>
</div>
<a class="anchor" id="ac633d3b00073cfd51b51778f48353be7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Tokenizer::m_FileIdx</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>File index, useful when parsing documentation; </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment</a> </dd></dl>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, and <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>.</p>

</div>
</div>
<a class="anchor" id="aa7ec19d970a7c6491b3b4b02aa65b7b7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::m_Filename</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Filename of the buffer </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a37bada75b07c120619498b10db279698">GetFilename()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>, <a class="el" href="classTokenizer.xhtml#ae07cdfdaf21627535b35b841c520081c">ReadFile()</a>, and <a class="el" href="classTokenizer.xhtml#a6b09a4a30dd22cf37df53c56ce19d1a8">Tokenizer()</a>.</p>

</div>
</div>
<a class="anchor" id="aea2e7b0795fc4ef6a5704e475da120f4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t Tokenizer::m_FirstRemainingLength</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Save the remaining length from m_TokenIndex to the end of m_Buffer before replace m_Buffer.</p>
<p>..........AAA.................. ^ [EOF]</p>
<p>It is the length between '^'(m_TokenIndex) and [EOF], sometimes there are not enough spaces to put the substitute before TokenIndex, so the m_Buffer will grows after the replacement:</p>
<p>BBBBBBBBBBBBBBBBBBBBBBBBB.................. ^ ! [EOF]</p>
<p>Here, m_TokenIndex is moved backward to the beginning of the new substitute string, but the length between '!' and [EOF] should not be changed. </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>.</p>

</div>
</div>
<a class="anchor" id="a456b81e262e9543fa1c0c89f5e886f94"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::m_IsOK</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>bool variable specifies whether the buffer is ready for parsing </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>, and <a class="el" href="classTokenizer.xhtml#aa13432af2028be6fbc3a82ea0ae4ed6c">IsOK()</a>.</p>

</div>
</div>
<a class="anchor" id="a26f4e66b19304d32ef750d8bd89bdf30"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Tokenizer::m_LastTokenIdx</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#a29fcd3e97359af69875dd7b2fd4c6261">SetLastTokenIdx()</a>, and <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>.</p>

</div>
</div>
<a class="anchor" id="a52c4a2537f4689107464a1758ff82b83"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_LineNumber</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>line offset in buffer, please note that it is 1 based, not 0 based </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#ad7093d8d59e2073b0312fba06465484c">GetLineNumber()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, <a class="el" href="classTokenizer.xhtml#a906abdace9ee254f514617e9f4460708">SkipToInlineCommentEnd()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a06ce2a825c6431604a9afd76d7c66a0b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classLoaderBase.xhtml">LoaderBase</a>* Tokenizer::m_Loader</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>File loader </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, and <a class="el" href="classTokenizer.xhtml#ae07cdfdaf21627535b35b841c520081c">ReadFile()</a>.</p>

</div>
</div>
<a class="anchor" id="a2d20d25188897957cff8a17daaba6669"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_NestLevel</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>keep track of block nesting { } </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#ae64f675daaadc90087b35e31776c4aea">GetNestingLevel()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, <a class="el" href="classTokenizer.xhtml#a531bbc786a41aa5fefc9ad4dc8cc24e1">RestoreNestingLevel()</a>, <a class="el" href="classTokenizer.xhtml#acf2c13aafcb90ecf14536957c94cd350">SaveNestingLevel()</a>, <a class="el" href="classTokenizer.xhtml#ab767d45e38396a43059010e7b2721fea">SkipToEOL()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a82725839dff7d9b965d65cc20a578dce"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::m_NextTokenDoc</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#a29fcd3e97359af69875dd7b2fd4c6261">SetLastTokenIdx()</a>, and <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>.</p>

</div>
</div>
<a class="anchor" id="a213f9af6ff22e26a0172b0d93676a5ac"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Tokenizer::m_PeekAvailable</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Peek token information </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="ad4b5ae52e84d7cd049f7938fbd62691d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_PeekLineNumber</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a215e173a59256f49f2090d9b1490b5f3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_PeekNestLevel</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="af1a9e4495d88d4fa48e70477adae1cdf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::m_PeekToken</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a88e1b4936a5b806a79ef6bfa828b3f69"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_PeekTokenIndex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="aeef805501531537a551331a4b42a6054"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t Tokenizer::m_RepeatReplaceCount</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Save the repeat replace buffer count if currently in replace parsing, if it is 0, this means replace buffer does not happen. </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>.</p>

</div>
</div>
<a class="anchor" id="a918eb8fea467374098e62d38caa3af9e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_SavedLineNumber</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>.</p>

</div>
</div>
<a class="anchor" id="aa80eea79a36ecabea18086b6154b6d1f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_SavedNestingLevel</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, <a class="el" href="classTokenizer.xhtml#a531bbc786a41aa5fefc9ad4dc8cc24e1">RestoreNestingLevel()</a>, and <a class="el" href="classTokenizer.xhtml#acf2c13aafcb90ecf14536957c94cd350">SaveNestingLevel()</a>.</p>

</div>
</div>
<a class="anchor" id="a1b8be9404c80f4c3121c6ccc6cef7f64"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_SavedTokenIndex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Saved token info (for <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>), m_TokenIndex will be moved forward or backward when either <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a> or <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a> is called, so we should save m_TokenIndex before it get modified. </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>.</p>

</div>
</div>
<a class="anchor" id="a23022c55329b9d0594c28fe7e61ff75f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="tokenizer_8h.xhtml#a5b1175f256359a25a7374d4ab1e5f845">TokenizerState</a> Tokenizer::m_State</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Tokeniser state specifies the skipping option </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a60cb0bbabbc5c926ae8d8c2cd1dcdd50">GetState()</a>, <a class="el" href="classTokenizer.xhtml#a9443936dc27df9f31c9c1049378979fd">IsSkippingUnwantedTokens()</a>, <a class="el" href="classTokenizer.xhtml#a0d9b0da5d3c5a5a82772fa181687deb3">SetState()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, and <a class="el" href="classTokenizer.xhtml#a14327d3879c1c138e1b6e30508f9c939">SplitArguments()</a>.</p>

</div>
</div>
<a class="anchor" id="afedfcfcf12801e07d247d87d57e18a00"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString Tokenizer::m_Token</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>token name </p>
<p>These variables define the current token string and its auxiliary information, such as the token name, the line number of the token, the current brace nest level. </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a5ad789658ddbf09bdfe7291564632c7f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_TokenIndex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>index offset in buffer, when parsing a buffer ....... namespace std { int a; ....... ^ &mdash; m_TokenIndex, m_Token = "std" m_TokenIndex always points to the next character of a valid token, in the above example, it points to the space after "std". </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#a9687b4b9dd5c230d91b0e7544cd9d350">CurrentChar()</a>, <a class="el" href="classTokenizer.xhtml#a14096c1090d7698bc98bdcf657b8308f">CurrentCharMoveNext()</a>, <a class="el" href="classTokenizer.xhtml#ae3e239675d52c7e2bfd6c5e8accf320a">DoGetToken()</a>, <a class="el" href="classTokenizer.xhtml#a8c8e922045ecac0af220bec337745448">GetPreprocessorType()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a0ed03f311660d8763c3fefa3a7de9898">IsBackslashBeforeEOL()</a>, <a class="el" href="classTokenizer.xhtml#a19475c7b83ffc0fe88feb8b1d011477b">IsEOF()</a>, <a class="el" href="classTokenizer.xhtml#a4d7d08ad92ba1b08e1691f1d97035611">IsEscapedChar()</a>, <a class="el" href="classTokenizer.xhtml#a87c2f2339823fe5e8666ec97ff1f9302">MoveToNextChar()</a>, <a class="el" href="classTokenizer.xhtml#a12cb86a8a2732a6173cc2034a1b4dc25">NextChar()</a>, <a class="el" href="classTokenizer.xhtml#a2eca266878979398035defc786898aab">NotEOF()</a>, <a class="el" href="classTokenizer.xhtml#a736574152ebabf5ab26241104780c775">PeekToken()</a>, <a class="el" href="classTokenizer.xhtml#a390765d4a92dccf76213179d341c8f10">PreviousChar()</a>, <a class="el" href="classTokenizer.xhtml#ae378c62367917203a6e39ed35d8c7447">ReadParentheses()</a>, <a class="el" href="classTokenizer.xhtml#a3733bafa796a5cee1c24e10b99cff9f9">ReadToEOL()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, <a class="el" href="classTokenizer.xhtml#a74009fa8bbcaf3b9fd14b8ac3970748a">SkipToNextConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#a130fc36a6ae8bc85595a448b2431bcaa">SkipUnwanted()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a7130a6e4eab333551d3847b638e9238a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="tokenizer_8h.xhtml#structTokenizerOptions">TokenizerOptions</a> Tokenizer::m_TokenizerOptions</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classTokenizer.xhtml" title="This is just a simple lexer class. ">Tokenizer</a> options specify the skipping option </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ab2d02ca538bc1f189147da232ca3193d">SetTokenizerOption()</a>, <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>, and <a class="el" href="classTokenizer.xhtml#a6b09a4a30dd22cf37df53c56ce19d1a8">Tokenizer()</a>.</p>

</div>
</div>
<a class="anchor" id="a074d189d560cfa8a66d2abcfe7e45a71"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classTokenTree.xhtml">TokenTree</a>* Tokenizer::m_TokenTree</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5b778c6166d72a15dcd1089350131328">CalcConditionExpression()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#aa5d2000b5492f2c4e603ccddaac56522">Init()</a>, <a class="el" href="classTokenizer.xhtml#ad9e5082fade9bdcc47bf90f483a37f69">InitFromBuffer()</a>, <a class="el" href="classTokenizer.xhtml#adc703fa5cf3da9f48f56740ba6b3a697">IsMacroDefined()</a>, <a class="el" href="classTokenizer.xhtml#a29fcd3e97359af69875dd7b2fd4c6261">SetLastTokenIdx()</a>, and <a class="el" href="classTokenizer.xhtml#a446e3f3933eddafe1c327cad72b3033f">SkipComment()</a>.</p>

</div>
</div>
<a class="anchor" id="ab00cbabae219258b6205f30f2bf2fedb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_UndoLineNumber</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="ac909e921e9d3ed3b8387573665df9c7f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_UndoNestLevel</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a165b332bb25e5d15c03ed3c50d3b6d0c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Tokenizer::m_UndoTokenIndex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Backup the previous <a class="el" href="classToken.xhtml">Token</a> information </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#aafb8ccfe3c5bd8422452b71e971bfa44">BaseInit()</a>, <a class="el" href="classTokenizer.xhtml#ac7addae7ad10df1c1550739eaf786d89">GetToken()</a>, <a class="el" href="classTokenizer.xhtml#afd511d462eb3685601dc98fc15a91b8b">HandleConditionPreprocessor()</a>, <a class="el" href="classTokenizer.xhtml#ac929769563e5b389e6444568d06eb6ef">ReplaceBufferText()</a>, and <a class="el" href="classTokenizer.xhtml#ac7f992387098dd3a486a9c994c9d5d7f">UngetToken()</a>.</p>

</div>
</div>
<a class="anchor" id="a7c3843608b817dedc7fa21f5a0c457aa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxStringHashMap Tokenizer::s_Replacements</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Static member, this is a hash map storing all user defined macro replacement rules </p>

<p>Referenced by <a class="el" href="classTokenizer.xhtml#a5cfcc35b74814401923fc99b8325c179">ConvertToHashReplacementMap()</a>, <a class="el" href="classTokenizer.xhtml#acc55243d2c7b13625fd01979a9cb2431">GetReplacedToken()</a>, <a class="el" href="classTokenizer.xhtml#ad44ad26a686ba76883b02d2d758f6101">GetTokenReplacementsMap()</a>, <a class="el" href="classTokenizer.xhtml#a1b3e4519a607a99b737e199d548ba5a4">RemoveReplacementString()</a>, and <a class="el" href="classTokenizer.xhtml#aecd704eb77201aecc908571b84ed2a3e">SetReplacementString()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="tokenizer_8h_source.xhtml">tokenizer.h</a></li>
<li><a class="el" href="tokenizer_8cpp.xhtml">tokenizer.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.8
</small></address>
</body>
</html>
