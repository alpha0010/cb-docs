<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.8"/>
<title>Code::Blocks: DebuggerBreakpoint Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Code::Blocks
   &#160;<span id="projectnumber">SVN r10078</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.8 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="structDebuggerBreakpoint-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">DebuggerBreakpoint Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="debugger__defs_8h_source.xhtml">debugger_defs.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for DebuggerBreakpoint:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="structDebuggerBreakpoint__inherit__graph.svg" width="170" height="595"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Collaboration diagram for DebuggerBreakpoint:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="structDebuggerBreakpoint__coll__graph.svg" width="170" height="595"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a5bba9a3d4c5a64c7d9dafb50ae160593"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593">BreakpointType</a> { <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a7a8be76f01b8b9725ea1814ca1d3071c">bptCode</a> = 0, 
<a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593affc9e18972d5296dbcef9c2924da585f">bptFunction</a>, 
<a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a9c8fe9fed02a2296d739982f381c4709">bptData</a>
 }</td></tr>
<tr class="separator:a5bba9a3d4c5a64c7d9dafb50ae160593"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aac6eb43b017e63ae69d9ade74fe99187"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#aac6eb43b017e63ae69d9ade74fe99187">DebuggerBreakpoint</a> ()</td></tr>
<tr class="separator:aac6eb43b017e63ae69d9ade74fe99187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63e754dee6c456dba87e508f3c7a1d04"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a63e754dee6c456dba87e508f3c7a1d04">SetEnabled</a> (bool flag)</td></tr>
<tr class="separator:a63e754dee6c456dba87e508f3c7a1d04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9170d40dc58cbc68b16358bc3cb1b2bd"><td class="memItemLeft" align="right" valign="top">virtual wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a9170d40dc58cbc68b16358bc3cb1b2bd">GetLocation</a> () const </td></tr>
<tr class="separator:a9170d40dc58cbc68b16358bc3cb1b2bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9e6f20742875efcb6425fb20a891432"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#af9e6f20742875efcb6425fb20a891432">GetLine</a> () const </td></tr>
<tr class="separator:af9e6f20742875efcb6425fb20a891432"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7a6b567eed4e39133d6a627bce0fee2"><td class="memItemLeft" align="right" valign="top">virtual wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#ad7a6b567eed4e39133d6a627bce0fee2">GetLineString</a> () const </td></tr>
<tr class="separator:ad7a6b567eed4e39133d6a627bce0fee2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3842f51cc4f91de92e64ad20e872494"><td class="memItemLeft" align="right" valign="top">virtual wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#ac3842f51cc4f91de92e64ad20e872494">GetType</a> () const </td></tr>
<tr class="separator:ac3842f51cc4f91de92e64ad20e872494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13e1d22ea937afbc8fcfe2c9e87da175"><td class="memItemLeft" align="right" valign="top">virtual wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo</a> () const </td></tr>
<tr class="separator:a13e1d22ea937afbc8fcfe2c9e87da175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eb2ae2807a31437a5b2a17457c3b297"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a7eb2ae2807a31437a5b2a17457c3b297">IsEnabled</a> () const </td></tr>
<tr class="separator:a7eb2ae2807a31437a5b2a17457c3b297"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc3729e13ae1b7fe65e241cdf548f1d0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#acc3729e13ae1b7fe65e241cdf548f1d0">IsVisibleInEditor</a> () const </td></tr>
<tr class="separator:acc3729e13ae1b7fe65e241cdf548f1d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5286eb9b2c4e4f6f1ceefe7905e21a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#acc5286eb9b2c4e4f6f1ceefe7905e21a">IsTemporary</a> () const </td></tr>
<tr class="separator:acc5286eb9b2c4e4f6f1ceefe7905e21a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classcbBreakpoint"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classcbBreakpoint')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classcbBreakpoint.xhtml">cbBreakpoint</a></td></tr>
<tr class="memitem:a860863c5f1469d5d71b34d1096840d6a inherit pub_methods_classcbBreakpoint"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbBreakpoint.xhtml#a860863c5f1469d5d71b34d1096840d6a">~cbBreakpoint</a> ()</td></tr>
<tr class="separator:a860863c5f1469d5d71b34d1096840d6a inherit pub_methods_classcbBreakpoint"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a6a8510b07ce1ba0285b8bf1d43ee89a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593">BreakpointType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a6a8510b07ce1ba0285b8bf1d43ee89a4">type</a></td></tr>
<tr class="memdesc:a6a8510b07ce1ba0285b8bf1d43ee89a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of this breakpoint.  <a href="#a6a8510b07ce1ba0285b8bf1d43ee89a4">More...</a><br /></td></tr>
<tr class="separator:a6a8510b07ce1ba0285b8bf1d43ee89a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6493912d8aad7d2a4e0b5dc99a2628a0"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a6493912d8aad7d2a4e0b5dc99a2628a0">filename</a></td></tr>
<tr class="memdesc:a6493912d8aad7d2a4e0b5dc99a2628a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">The filename for the breakpoint (kept as relative).  <a href="#a6493912d8aad7d2a4e0b5dc99a2628a0">More...</a><br /></td></tr>
<tr class="separator:a6493912d8aad7d2a4e0b5dc99a2628a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba971bca8fb7474cb511ce5038f4db18"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#aba971bca8fb7474cb511ce5038f4db18">filenameAsPassed</a></td></tr>
<tr class="memdesc:aba971bca8fb7474cb511ce5038f4db18"><td class="mdescLeft">&#160;</td><td class="mdescRight">The filename for the breakpoint as passed to the debugger (i.e. full filename).  <a href="#aba971bca8fb7474cb511ce5038f4db18">More...</a><br /></td></tr>
<tr class="separator:aba971bca8fb7474cb511ce5038f4db18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e6f29cd171247983229e26b2bf0356d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a4e6f29cd171247983229e26b2bf0356d">line</a></td></tr>
<tr class="memdesc:a4e6f29cd171247983229e26b2bf0356d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The line for the breakpoint.  <a href="#a4e6f29cd171247983229e26b2bf0356d">More...</a><br /></td></tr>
<tr class="separator:a4e6f29cd171247983229e26b2bf0356d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a507cc3ff415a6ed9deac73c3fec6dcc0"><td class="memItemLeft" align="right" valign="top">long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a507cc3ff415a6ed9deac73c3fec6dcc0">index</a></td></tr>
<tr class="memdesc:a507cc3ff415a6ed9deac73c3fec6dcc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">The breakpoint number. Set automatically. <em>Don't</em> write to it.  <a href="#a507cc3ff415a6ed9deac73c3fec6dcc0">More...</a><br /></td></tr>
<tr class="separator:a507cc3ff415a6ed9deac73c3fec6dcc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c220d55dd7fdf8533bbe967fe53bf2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a95c220d55dd7fdf8533bbe967fe53bf2">temporary</a></td></tr>
<tr class="memdesc:a95c220d55dd7fdf8533bbe967fe53bf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this a temporary (one-shot) breakpoint?  <a href="#a95c220d55dd7fdf8533bbe967fe53bf2">More...</a><br /></td></tr>
<tr class="separator:a95c220d55dd7fdf8533bbe967fe53bf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac061fb976195d1b68cabf45b71d68152"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#ac061fb976195d1b68cabf45b71d68152">enabled</a></td></tr>
<tr class="memdesc:ac061fb976195d1b68cabf45b71d68152"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the breakpoint enabled?  <a href="#ac061fb976195d1b68cabf45b71d68152">More...</a><br /></td></tr>
<tr class="separator:ac061fb976195d1b68cabf45b71d68152"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a177a4251b5c8e1af86ed48beab5be3ce"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a177a4251b5c8e1af86ed48beab5be3ce">active</a></td></tr>
<tr class="memdesc:a177a4251b5c8e1af86ed48beab5be3ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the breakpoint active? (currently unused)  <a href="#a177a4251b5c8e1af86ed48beab5be3ce">More...</a><br /></td></tr>
<tr class="separator:a177a4251b5c8e1af86ed48beab5be3ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f363c25224f10b666af9245fd8da53"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a22f363c25224f10b666af9245fd8da53">useIgnoreCount</a></td></tr>
<tr class="memdesc:a22f363c25224f10b666af9245fd8da53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Should this breakpoint be ignored for the first X passes? (<code>x</code> == <code>ignoreCount</code>)  <a href="#a22f363c25224f10b666af9245fd8da53">More...</a><br /></td></tr>
<tr class="separator:a22f363c25224f10b666af9245fd8da53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c4e91629f437f1273e714b6422de9d4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a5c4e91629f437f1273e714b6422de9d4">ignoreCount</a></td></tr>
<tr class="memdesc:a5c4e91629f437f1273e714b6422de9d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of passes before this breakpoint should hit. <code>useIgnoreCount</code> must be true.  <a href="#a5c4e91629f437f1273e714b6422de9d4">More...</a><br /></td></tr>
<tr class="separator:a5c4e91629f437f1273e714b6422de9d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5761bb1f9e9c8e56747030c973f4020"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#af5761bb1f9e9c8e56747030c973f4020">useCondition</a></td></tr>
<tr class="memdesc:af5761bb1f9e9c8e56747030c973f4020"><td class="mdescLeft">&#160;</td><td class="mdescRight">Should this breakpoint hit only if a specific condition is met?  <a href="#af5761bb1f9e9c8e56747030c973f4020">More...</a><br /></td></tr>
<tr class="separator:af5761bb1f9e9c8e56747030c973f4020"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af018d6bb083042cfd48556184165254d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#af018d6bb083042cfd48556184165254d">wantsCondition</a></td></tr>
<tr class="memdesc:af018d6bb083042cfd48556184165254d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate condition for pending breakpoints at first stop !  <a href="#af018d6bb083042cfd48556184165254d">More...</a><br /></td></tr>
<tr class="separator:af018d6bb083042cfd48556184165254d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75bf116ce234fbb3848a10d46eac01e5"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a75bf116ce234fbb3848a10d46eac01e5">condition</a></td></tr>
<tr class="memdesc:a75bf116ce234fbb3848a10d46eac01e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">The condition that must be met for the breakpoint to hit. <code>useCondition</code> must be true.  <a href="#a75bf116ce234fbb3848a10d46eac01e5">More...</a><br /></td></tr>
<tr class="separator:a75bf116ce234fbb3848a10d46eac01e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a049fbade4e22db126061759070798fcb"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a049fbade4e22db126061759070798fcb">func</a></td></tr>
<tr class="memdesc:a049fbade4e22db126061759070798fcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">The function to set the breakpoint. If this is set, it is preferred over the filename/line combination.  <a href="#a049fbade4e22db126061759070798fcb">More...</a><br /></td></tr>
<tr class="separator:a049fbade4e22db126061759070798fcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21c5ec85ee9f6939b206653bc610cff1"><td class="memItemLeft" align="right" valign="top">unsigned long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a21c5ec85ee9f6939b206653bc610cff1">address</a></td></tr>
<tr class="memdesc:a21c5ec85ee9f6939b206653bc610cff1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The actual breakpoint address. This is read back from the debugger. <em>Don't</em> write to it.  <a href="#a21c5ec85ee9f6939b206653bc610cff1">More...</a><br /></td></tr>
<tr class="separator:a21c5ec85ee9f6939b206653bc610cff1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a025b2f20557b1122b2b24f2d1f5df806"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a025b2f20557b1122b2b24f2d1f5df806">alreadySet</a></td></tr>
<tr class="memdesc:a025b2f20557b1122b2b24f2d1f5df806"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this already set? Used to mark temporary breakpoints for removal.  <a href="#a025b2f20557b1122b2b24f2d1f5df806">More...</a><br /></td></tr>
<tr class="separator:a025b2f20557b1122b2b24f2d1f5df806"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae75cba1e03f46d19659fb09977f0a248"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#ae75cba1e03f46d19659fb09977f0a248">lineText</a></td></tr>
<tr class="memdesc:ae75cba1e03f46d19659fb09977f0a248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Optionally, the breakpoint line's text (used by GDB for setting breapoints on ctors/dtors).  <a href="#ae75cba1e03f46d19659fb09977f0a248">More...</a><br /></td></tr>
<tr class="separator:ae75cba1e03f46d19659fb09977f0a248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b034047dd543b77865199e2350d157d"><td class="memItemLeft" align="right" valign="top">wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a1b034047dd543b77865199e2350d157d">breakAddress</a></td></tr>
<tr class="memdesc:a1b034047dd543b77865199e2350d157d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid only for type==bptData: address to break when read/written.  <a href="#a1b034047dd543b77865199e2350d157d">More...</a><br /></td></tr>
<tr class="separator:a1b034047dd543b77865199e2350d157d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48cf5c606a2e75ca3c571d6ee27b7965"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a48cf5c606a2e75ca3c571d6ee27b7965">breakOnRead</a></td></tr>
<tr class="memdesc:a48cf5c606a2e75ca3c571d6ee27b7965"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid only for type==bptData: break when memory is read from.  <a href="#a48cf5c606a2e75ca3c571d6ee27b7965">More...</a><br /></td></tr>
<tr class="separator:a48cf5c606a2e75ca3c571d6ee27b7965"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8987702bebeb340702cab525cd2cf93"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#af8987702bebeb340702cab525cd2cf93">breakOnWrite</a></td></tr>
<tr class="memdesc:af8987702bebeb340702cab525cd2cf93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid only for type==bptData: break when memory is written to.  <a href="#af8987702bebeb340702cab525cd2cf93">More...</a><br /></td></tr>
<tr class="separator:af8987702bebeb340702cab525cd2cf93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a03ca46f626fac45ac040802eaa1c49"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDebuggerBreakpoint.xhtml#a2a03ca46f626fac45ac040802eaa1c49">userData</a></td></tr>
<tr class="memdesc:a2a03ca46f626fac45ac040802eaa1c49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Custom user data.  <a href="#a2a03ca46f626fac45ac040802eaa1c49">More...</a><br /></td></tr>
<tr class="separator:a2a03ca46f626fac45ac040802eaa1c49"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Debugger breakpoint interface.</p>
<p>This is the struct used for debugger breakpoints. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a class="anchor" id="a5bba9a3d4c5a64c7d9dafb50ae160593"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593">DebuggerBreakpoint::BreakpointType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="a5bba9a3d4c5a64c7d9dafb50ae160593a7a8be76f01b8b9725ea1814ca1d3071c"></a>bptCode&#160;</td><td class="fielddoc">
<p>Normal file/line breakpoint. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a5bba9a3d4c5a64c7d9dafb50ae160593affc9e18972d5296dbcef9c2924da585f"></a>bptFunction&#160;</td><td class="fielddoc">
<p>Function signature breakpoint. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a5bba9a3d4c5a64c7d9dafb50ae160593a9c8fe9fed02a2296d739982f381c4709"></a>bptData&#160;</td><td class="fielddoc">
<p>Data breakpoint. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aac6eb43b017e63ae69d9ade74fe99187"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">DebuggerBreakpoint::DebuggerBreakpoint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructor. Sets default values for members. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a13e1d22ea937afbc8fcfe2c9e87da175"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::GetInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#a2cc2783a00e429aadbf14b246c220cef">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a7a8be76f01b8b9725ea1814ca1d3071c">bptCode</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a9c8fe9fed02a2296d739982f381c4709">bptData</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593affc9e18972d5296dbcef9c2924da585f">bptFunction</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a48cf5c606a2e75ca3c571d6ee27b7965">breakOnRead</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#af8987702bebeb340702cab525cd2cf93">breakOnWrite</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a75bf116ce234fbb3848a10d46eac01e5">condition</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a5c4e91629f437f1273e714b6422de9d4">ignoreCount</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a507cc3ff415a6ed9deac73c3fec6dcc0">index</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a95c220d55dd7fdf8533bbe967fe53bf2">temporary</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a6a8510b07ce1ba0285b8bf1d43ee89a4">type</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#af5761bb1f9e9c8e56747030c973f4020">useCondition</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a22f363c25224f10b666af9245fd8da53">useIgnoreCount</a>.</p>

</div>
</div>
<a class="anchor" id="af9e6f20742875efcb6425fb20a891432"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int DebuggerBreakpoint::GetLine </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#a95d9d59c8004e8b7d486680cc7afd447">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#a4e6f29cd171247983229e26b2bf0356d">line</a>.</p>

</div>
</div>
<a class="anchor" id="ad7a6b567eed4e39133d6a627bce0fee2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::GetLineString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#a7a9923760c3fb72658c62c8391baa53d">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a7a8be76f01b8b9725ea1814ca1d3071c">bptCode</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a4e6f29cd171247983229e26b2bf0356d">line</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a6a8510b07ce1ba0285b8bf1d43ee89a4">type</a>.</p>

</div>
</div>
<a class="anchor" id="a9170d40dc58cbc68b16358bc3cb1b2bd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::GetLocation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#abcfae9ed25d0ceebf5504c1453f4bc60">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a7a8be76f01b8b9725ea1814ca1d3071c">bptCode</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a9c8fe9fed02a2296d739982f381c4709">bptData</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593affc9e18972d5296dbcef9c2924da585f">bptFunction</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a1b034047dd543b77865199e2350d157d">breakAddress</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#aba971bca8fb7474cb511ce5038f4db18">filenameAsPassed</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a049fbade4e22db126061759070798fcb">func</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a6a8510b07ce1ba0285b8bf1d43ee89a4">type</a>.</p>

</div>
</div>
<a class="anchor" id="ac3842f51cc4f91de92e64ad20e872494"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#a9e00b43773f625643d177d914589f00b">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a7a8be76f01b8b9725ea1814ca1d3071c">bptCode</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a9c8fe9fed02a2296d739982f381c4709">bptData</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593affc9e18972d5296dbcef9c2924da585f">bptFunction</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a6a8510b07ce1ba0285b8bf1d43ee89a4">type</a>.</p>

</div>
</div>
<a class="anchor" id="a7eb2ae2807a31437a5b2a17457c3b297"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::IsEnabled </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#aeb12a8a4f5ddcfb4ab31c2d177ae2934">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#ac061fb976195d1b68cabf45b71d68152">enabled</a>.</p>

</div>
</div>
<a class="anchor" id="acc5286eb9b2c4e4f6f1ceefe7905e21a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::IsTemporary </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#a58bb2304cd32315fc5405a69beecc2ef">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#a95c220d55dd7fdf8533bbe967fe53bf2">temporary</a>.</p>

</div>
</div>
<a class="anchor" id="acc3729e13ae1b7fe65e241cdf548f1d0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::IsVisibleInEditor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#a877f23fa323e9a8a3894e5cdcd210055">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593a7a8be76f01b8b9725ea1814ca1d3071c">bptCode</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a6a8510b07ce1ba0285b8bf1d43ee89a4">type</a>.</p>

</div>
</div>
<a class="anchor" id="a63e754dee6c456dba87e508f3c7a1d04"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DebuggerBreakpoint::SetEnabled </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classcbBreakpoint.xhtml#a07ad4c2a6cfb85e8267d66e9e8a81659">cbBreakpoint</a>.</p>

<p>References <a class="el" href="structDebuggerBreakpoint.xhtml#ac061fb976195d1b68cabf45b71d68152">enabled</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a177a4251b5c8e1af86ed48beab5be3ce"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::active</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is the breakpoint active? (currently unused) </p>

</div>
</div>
<a class="anchor" id="a21c5ec85ee9f6939b206653bc610cff1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long int DebuggerBreakpoint::address</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The actual breakpoint address. This is read back from the debugger. <em>Don't</em> write to it. </p>

</div>
</div>
<a class="anchor" id="a025b2f20557b1122b2b24f2d1f5df806"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::alreadySet</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this already set? Used to mark temporary breakpoints for removal. </p>

</div>
</div>
<a class="anchor" id="a1b034047dd543b77865199e2350d157d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::breakAddress</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Valid only for type==bptData: address to break when read/written. </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a9170d40dc58cbc68b16358bc3cb1b2bd">GetLocation()</a>.</p>

</div>
</div>
<a class="anchor" id="a48cf5c606a2e75ca3c571d6ee27b7965"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::breakOnRead</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Valid only for type==bptData: break when memory is read from. </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>.</p>

</div>
</div>
<a class="anchor" id="af8987702bebeb340702cab525cd2cf93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::breakOnWrite</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Valid only for type==bptData: break when memory is written to. </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>.</p>

</div>
</div>
<a class="anchor" id="a75bf116ce234fbb3848a10d46eac01e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::condition</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The condition that must be met for the breakpoint to hit. <code>useCondition</code> must be true. </p>

<p>Referenced by <a class="el" href="classEditBreakpointDlg.xhtml#aa1492913c697829aa9cd9f712f5ca198">EditBreakpointDlg::EndModal()</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>.</p>

</div>
</div>
<a class="anchor" id="ac061fb976195d1b68cabf45b71d68152"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::enabled</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is the breakpoint enabled? </p>

<p>Referenced by <a class="el" href="classDebuggerGDB.xhtml#a9b0349d4d191525abea0f9f93511dbb3">DebuggerGDB::EnableBreakpoint()</a>, <a class="el" href="classEditBreakpointDlg.xhtml#aa1492913c697829aa9cd9f712f5ca198">EditBreakpointDlg::EndModal()</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a7eb2ae2807a31437a5b2a17457c3b297">IsEnabled()</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a63e754dee6c456dba87e508f3c7a1d04">SetEnabled()</a>.</p>

</div>
</div>
<a class="anchor" id="a6493912d8aad7d2a4e0b5dc99a2628a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::filename</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The filename for the breakpoint (kept as relative). </p>

<p>Referenced by <a class="el" href="classDebuggerState.xhtml#a5bcbcc3c07072279e9ec55680c5d94e4">DebuggerState::HasBreakpoint()</a>.</p>

</div>
</div>
<a class="anchor" id="aba971bca8fb7474cb511ce5038f4db18"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::filenameAsPassed</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The filename for the breakpoint as passed to the debugger (i.e. full filename). </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a9170d40dc58cbc68b16358bc3cb1b2bd">GetLocation()</a>, and <a class="el" href="classDebuggerState.xhtml#a5bcbcc3c07072279e9ec55680c5d94e4">DebuggerState::HasBreakpoint()</a>.</p>

</div>
</div>
<a class="anchor" id="a049fbade4e22db126061759070798fcb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::func</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The function to set the breakpoint. If this is set, it is preferred over the filename/line combination. </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a9170d40dc58cbc68b16358bc3cb1b2bd">GetLocation()</a>.</p>

</div>
</div>
<a class="anchor" id="a5c4e91629f437f1273e714b6422de9d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int DebuggerBreakpoint::ignoreCount</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The number of passes before this breakpoint should hit. <code>useIgnoreCount</code> must be true. </p>

<p>Referenced by <a class="el" href="classEditBreakpointDlg.xhtml#aa1492913c697829aa9cd9f712f5ca198">EditBreakpointDlg::EndModal()</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>.</p>

</div>
</div>
<a class="anchor" id="a507cc3ff415a6ed9deac73c3fec6dcc0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long int DebuggerBreakpoint::index</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The breakpoint number. Set automatically. <em>Don't</em> write to it. </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>.</p>

</div>
</div>
<a class="anchor" id="a4e6f29cd171247983229e26b2bf0356d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int DebuggerBreakpoint::line</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The line for the breakpoint. </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#af9e6f20742875efcb6425fb20a891432">GetLine()</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#ad7a6b567eed4e39133d6a627bce0fee2">GetLineString()</a>, and <a class="el" href="classDebuggerState.xhtml#a5bcbcc3c07072279e9ec55680c5d94e4">DebuggerState::HasBreakpoint()</a>.</p>

</div>
</div>
<a class="anchor" id="ae75cba1e03f46d19659fb09977f0a248"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">wxString DebuggerBreakpoint::lineText</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Optionally, the breakpoint line's text (used by GDB for setting breapoints on ctors/dtors). </p>

</div>
</div>
<a class="anchor" id="a95c220d55dd7fdf8533bbe967fe53bf2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::temporary</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this a temporary (one-shot) breakpoint? </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>, <a class="el" href="classDebuggerState.xhtml#a5bcbcc3c07072279e9ec55680c5d94e4">DebuggerState::HasBreakpoint()</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#acc5286eb9b2c4e4f6f1ceefe7905e21a">IsTemporary()</a>.</p>

</div>
</div>
<a class="anchor" id="a6a8510b07ce1ba0285b8bf1d43ee89a4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structDebuggerBreakpoint.xhtml#a5bba9a3d4c5a64c7d9dafb50ae160593">BreakpointType</a> DebuggerBreakpoint::type</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of this breakpoint. </p>

<p>Referenced by <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#ad7a6b567eed4e39133d6a627bce0fee2">GetLineString()</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#a9170d40dc58cbc68b16358bc3cb1b2bd">GetLocation()</a>, <a class="el" href="structDebuggerBreakpoint.xhtml#ac3842f51cc4f91de92e64ad20e872494">GetType()</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#acc3729e13ae1b7fe65e241cdf548f1d0">IsVisibleInEditor()</a>.</p>

</div>
</div>
<a class="anchor" id="af5761bb1f9e9c8e56747030c973f4020"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::useCondition</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Should this breakpoint hit only if a specific condition is met? </p>

<p>Referenced by <a class="el" href="classEditBreakpointDlg.xhtml#aa1492913c697829aa9cd9f712f5ca198">EditBreakpointDlg::EndModal()</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>.</p>

</div>
</div>
<a class="anchor" id="a22f363c25224f10b666af9245fd8da53"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::useIgnoreCount</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Should this breakpoint be ignored for the first X passes? (<code>x</code> == <code>ignoreCount</code>) </p>

<p>Referenced by <a class="el" href="classEditBreakpointDlg.xhtml#aa1492913c697829aa9cd9f712f5ca198">EditBreakpointDlg::EndModal()</a>, and <a class="el" href="structDebuggerBreakpoint.xhtml#a13e1d22ea937afbc8fcfe2c9e87da175">GetInfo()</a>.</p>

</div>
</div>
<a class="anchor" id="a2a03ca46f626fac45ac040802eaa1c49"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* DebuggerBreakpoint::userData</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Custom user data. </p>

</div>
</div>
<a class="anchor" id="af018d6bb083042cfd48556184165254d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DebuggerBreakpoint::wantsCondition</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate condition for pending breakpoints at first stop ! </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li><a class="el" href="debugger__defs_8h_source.xhtml">debugger_defs.h</a></li>
<li><a class="el" href="debugger__defs_8cpp.xhtml">debugger_defs.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.8
</small></address>
</body>
</html>
