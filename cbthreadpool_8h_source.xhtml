<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.8"/>
<title>Code::Blocks: cbthreadpool.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Code::Blocks
   &#160;<span id="projectnumber">SVN r10170</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.8 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cbthreadpool.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cbthreadpool_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * This file is part of the Code::Blocks IDE and licensed under the GNU Lesser General Public License, version 3</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * http://www.gnu.org/licenses/lgpl-3.0.html</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#ifndef CBTHREADPOOL_H</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#define CBTHREADPOOL_H</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;wx/thread.h&gt;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;wx/event.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cbthreadedtask_8h.xhtml">cbthreadedtask.h</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="settings_8h.xhtml">settings.h</a>&quot;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="prep_8h.xhtml">prep.h</a>&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml">   19</a></span>&#160;<span class="keyword">class </span><a class="code" href="settings_8h.xhtml#aae8fdf6bcc88c172ca8a75ad80f17a95">DLLIMPORT</a> <a class="code" href="classcbThreadPool.xhtml">cbThreadPool</a></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="classcbThreadPool.xhtml">cbThreadPool</a>(wxEvtHandler *owner, <span class="keywordtype">int</span> <span class="keywordtype">id</span> = -1, <span class="keywordtype">int</span> concurrentThreads = -1, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stackSize = 0);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    ~<a class="code" href="classcbThreadPool.xhtml">cbThreadPool</a>();</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">void</span> SetConcurrentThreads(<span class="keywordtype">int</span> concurrentThreads);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">int</span> GetConcurrentThreads() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#aa18516a470a7b247852b520d81cc1912">   49</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classcbThreadPool.xhtml#aa18516a470a7b247852b520d81cc1912">GetId</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ID; }</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">void</span> AddTask(<a class="code" href="classcbThreadedTask.xhtml">cbThreadedTask</a> *task, <span class="keywordtype">bool</span> autodelete = <span class="keyword">true</span>);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">void</span> AbortAllTasks();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">bool</span> Done() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">void</span> BatchBegin();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">void</span> BatchEnd();</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">private</span>:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">/* class for counted reference semantics</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     * - deletes the object to which it refers when the last CountedPtr</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     *   that refers to it is destroyed</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml">   93</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr</a></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="keyword">private</span>:</div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#aa958980fe778911e2c863905f7c4fb7d">   96</a></span>&#160;        T *<a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#aa958980fe778911e2c863905f7c4fb7d">ptr</a>;         <span class="comment">// pointer to the value</span></div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#a8b2337426fda6b6b972b3976aaf9c005">   97</a></span>&#160;        <span class="keywordtype">long</span> *<a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#a8b2337426fda6b6b972b3976aaf9c005">count</a>;    <span class="comment">// shared number of owners</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">// initialize pointer with existing pointer</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// - requires that the pointer p is a return value of new</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">explicit</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr</a>(T *p = 0);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">// copy pointer (one more owner)</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr</a>(<span class="keyword">const</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr&lt;T&gt;</a> &amp;p) <span class="keywordflow">throw</span>();</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment">// destructor (delete value if this was the last owner)</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        ~<a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr</a>() throw();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="comment">// assignment (unshare old and share new value)</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr</a>&lt;T&gt; &amp;operator = (const <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr</a>&lt;T&gt; &amp;p) throw();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;         <span class="comment">// access the value to which the pointer refers</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        T &amp;operator * () const throw();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        T *operator -&gt; () const throw();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      private:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordtype">void</span> dispose(); <span class="comment">//decrease the counter, and if it get 0, destroy both counter and ptr</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    };</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1cbWorkerThread.xhtml">  122</a></span>&#160;    class <a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml">cbWorkerThread</a> : public wxThread</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml">cbWorkerThread</a>(<a class="code" href="classcbThreadPool.xhtml">cbThreadPool</a> *pool, <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr&lt;wxSemaphore&gt;</a> &amp;semaphore);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        ExitCode Entry();</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordtype">void</span> Abort();</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordtype">bool</span> Aborted() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordtype">void</span> AbortTask();</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      <span class="keyword">private</span>:</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1cbWorkerThread.xhtml#ab18a3a50d37f170b73c32ab61bd7e341">  149</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml#ab18a3a50d37f170b73c32ab61bd7e341">m_abort</a>;</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1cbWorkerThread.xhtml#acd2e52b4163c12e67abd94dde384d9d3">  150</a></span>&#160;        <a class="code" href="classcbThreadPool.xhtml">cbThreadPool</a> *<a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml#acd2e52b4163c12e67abd94dde384d9d3">m_pPool</a>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">// a counted semaphore shared with all the cbWorkerThread</span></div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1cbWorkerThread.xhtml#a12afce991a6d70dd8633dbb8c793bad6">  152</a></span>&#160;        <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr&lt;wxSemaphore&gt;</a> <a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml#a12afce991a6d70dd8633dbb8c793bad6">m_semaphore</a>;</div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1cbWorkerThread.xhtml#a8c893d611b37f7608b988acd9d835aa3">  153</a></span>&#160;        <a class="code" href="classcbThreadedTask.xhtml">cbThreadedTask</a> *<a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml#a8c893d611b37f7608b988acd9d835aa3">m_pTask</a>;</div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1cbWorkerThread.xhtml#ac01dec50e4dc4b40abc9b28e123a8181">  154</a></span>&#160;        wxMutex <a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml#ac01dec50e4dc4b40abc9b28e123a8181">m_taskMutex</a>;<span class="comment">// to protect the member variable accessing from multiply threads</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    };</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#ac2fb989a07ad9a99ff99be235d32e5dc">  157</a></span>&#160;    <span class="keyword">typedef</span> std::vector&lt;cbWorkerThread *&gt; <a class="code" href="classcbThreadPool.xhtml#ac2fb989a07ad9a99ff99be235d32e5dc">WorkerThreadsArray</a>;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml">  160</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml">cbThreadedTaskElement</a></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#ae0121c3d346e2f0ca72b59cc3e96dfc2">  162</a></span>&#160;      <a class="code" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#ae0121c3d346e2f0ca72b59cc3e96dfc2">cbThreadedTaskElement</a>(<a class="code" href="classcbThreadedTask.xhtml">cbThreadedTask</a> *_task = <span class="keyword">nullptr</span>, <span class="keywordtype">bool</span> _autodelete = <span class="keyword">false</span>)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      : task(_task),</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        autodelete(_autodelete)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// empty</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#af42b56648c5ce11ac5b3f9f5063fa082">  170</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#af42b56648c5ce11ac5b3f9f5063fa082">Delete</a>()</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> (autodelete)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;          <span class="keyword">delete</span> task;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;          task = <span class="keyword">nullptr</span>; <span class="comment">// better safe than sorry</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#a6985bd1d08ebefbc3e12b8ae29d282b4">  179</a></span>&#160;      <a class="code" href="classcbThreadedTask.xhtml">cbThreadedTask</a> *<a class="code" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#a6985bd1d08ebefbc3e12b8ae29d282b4">task</a>;</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#aa55d258bb692838a6beae4d808733735">  180</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#aa55d258bb692838a6beae4d808733735">autodelete</a>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    };</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a76b8e09dfd610b36e62c92e3ef6e194b">  183</a></span>&#160;    <span class="keyword">typedef</span> std::list&lt;cbThreadedTaskElement&gt; <a class="code" href="classcbThreadPool.xhtml#a76b8e09dfd610b36e62c92e3ef6e194b">TasksQueue</a>;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a25fe7ba24172c29abc0b47c18d518f76">  185</a></span>&#160;    wxEvtHandler *<a class="code" href="classcbThreadPool.xhtml#a25fe7ba24172c29abc0b47c18d518f76">m_pOwner</a>; <span class="comment">// events notification will send to this guy</span></div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a42760ffb005c34832e2cbf15ef642144">  186</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classcbThreadPool.xhtml#a42760ffb005c34832e2cbf15ef642144">m_ID</a>;           <span class="comment">// id used to fill the ID field of the event</span></div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a0fbccda9298660730efed413e8b84750">  187</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classcbThreadPool.xhtml#a0fbccda9298660730efed413e8b84750">m_batching</a>;    <span class="comment">// whether in batch mode of adding tasks</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// current number of concurrent threads, this is the maximum value of the m_workingThreads</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// this variable should always be positive, 0 and -1 is not allowed.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">  191</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">m_concurrentThreads</a>;</div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#ad2152884ee6df9ad1772dfe2c879906b">  192</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classcbThreadPool.xhtml#ad2152884ee6df9ad1772dfe2c879906b">m_stackSize</a>; <span class="comment">// stack size for every threads</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// if we cannot apply the new value of concurrent threads, keep it here, usually the time to</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// apply a scheduled value is when all the tasks is done.</span></div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#aa1516ed39ec647bd4133375b21d9ddf8">  196</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classcbThreadPool.xhtml#aa1516ed39ec647bd4133375b21d9ddf8">m_concurrentThreadsSchedule</a>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// the total threads(cbWorkerThread) are stored here, this contains all the threads either is</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// currently running or in idle() mode.</span></div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#aa8e5c264770f8934e49211febd399da4">  200</a></span>&#160;    WorkerThreadsArray <a class="code" href="classcbThreadPool.xhtml#aa8e5c264770f8934e49211febd399da4">m_threads</a>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// the pending tasks (cbThreadedTaskElement), usually we have many tasks to run in the pool, but</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// we have limited number of threads to run those tasks, so tasks which don&#39;t have the change to</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// run will be put in the queue. Once a thread is finish a task, it will fetch a new task from</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// this task queue.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#abdf43b1e2415efaf8e199796890d9400">  206</a></span>&#160;    TasksQueue <a class="code" href="classcbThreadPool.xhtml#abdf43b1e2415efaf8e199796890d9400">m_tasksQueue</a>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// true if any task added, reset to false if all the tasks is done</span></div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#ad48ac7048eab2e87f3324d952f5c4c84">  209</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classcbThreadPool.xhtml#ad48ac7048eab2e87f3324d952f5c4c84">m_taskAdded</a>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a352cdd00957d729e5e37d1895d8e3dad">  211</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classcbThreadPool.xhtml#a352cdd00957d729e5e37d1895d8e3dad">m_workingThreads</a>; <span class="comment">// how many working threads are running tasks</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a69199fbb98970a3d16bc0a54fbd29cfa">  213</a></span>&#160;    <span class="keyword">mutable</span> wxMutex <a class="code" href="classcbThreadPool.xhtml#a69199fbb98970a3d16bc0a54fbd29cfa">m_Mutex</a>; <span class="comment">// we better be safe, protect the change of member variables</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// used to synchronize the Worker Threads, the counted value is that how many threads are</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// sharing this semaphore. The semaphore&#39;s initial value is the thread number we can used to</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// run the tasks.</span></div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a810a0448ebb198e02502b413cccbafd8">  218</a></span>&#160;    <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr&lt;wxSemaphore&gt;</a> <a class="code" href="classcbThreadPool.xhtml#a810a0448ebb198e02502b413cccbafd8">m_semaphore</a>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">void</span> _SetConcurrentThreads(<span class="keywordtype">int</span> concurrentThreads); <span class="comment">// like SetConcurrentThreads, but non-thread safe</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// awakes all threads, this is used when we are going to abort all the threads, there are two</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// cases we need to call Broadcast(), one is the destructor, the other is the user need to</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// change the concurrent thread numbers, so we abort all the threads, and re-create them again.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">void</span> Broadcast();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// awakes only a few threads, this usually happens when we add some tasks, and there are some</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">// threads which is currently in idle mode, so we can awake these idle threads to run tasks.</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordtype">void</span> AwakeNeeded();</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a518ba3d520b04b3459bba18146d1d51d">  233</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml">cbWorkerThread</a>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml">cbThreadedTaskElement</a> GetNextTask();</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">void</span> WorkingThread();</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">bool</span> WaitingThread();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordtype">void</span> TaskDone(<a class="code" href="classcbThreadPool_1_1cbWorkerThread.xhtml">cbWorkerThread</a> *thread);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;};</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">/* ************************************************ */</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">/* **************** INLINE MEMBERS **************** */</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">/* ************************************************ */</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a410ba875cd41fa884cd22391acbaba8a">  264</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classcbThreadPool.xhtml#a410ba875cd41fa884cd22391acbaba8a">cbThreadPool::cbThreadPool</a>(wxEvtHandler *owner, <span class="keywordtype">int</span> <span class="keywordtype">id</span>, <span class="keywordtype">int</span> concurrentThreads, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stackSize)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;: m_pOwner(owner),</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  m_ID(id),</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  m_batching(false),</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  m_concurrentThreads(-1),</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  m_stackSize(stackSize),</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  m_concurrentThreadsSchedule(0),</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  m_taskAdded(false),</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  m_workingThreads(0),</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  m_semaphore(new wxSemaphore)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  <span class="comment">// m_concurrentThreads will be set to a positive integer value.</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <a class="code" href="classcbThreadPool.xhtml#a5a39495772bd50d7beff8390325f802a">SetConcurrentThreads</a>(concurrentThreads);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a1a28b9a6ac7fb3dff239ded95ca2b597">  279</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classcbThreadPool.xhtml#a1a28b9a6ac7fb3dff239ded95ca2b597">cbThreadPool::GetConcurrentThreads</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  wxMutexLocker lock(<a class="code" href="classcbThreadPool.xhtml#a69199fbb98970a3d16bc0a54fbd29cfa">m_Mutex</a>);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classcbThreadPool.xhtml#aa1516ed39ec647bd4133375b21d9ddf8">m_concurrentThreadsSchedule</a> ? <a class="code" href="classcbThreadPool.xhtml#aa1516ed39ec647bd4133375b21d9ddf8">m_concurrentThreadsSchedule</a> : <a class="code" href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">m_concurrentThreads</a>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#ac19335d0513fa16c010ac61d3f458d05">  285</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classcbThreadPool.xhtml#ac19335d0513fa16c010ac61d3f458d05">cbThreadPool::Done</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  wxMutexLocker lock(<a class="code" href="classcbThreadPool.xhtml#a69199fbb98970a3d16bc0a54fbd29cfa">m_Mutex</a>);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classcbThreadPool.xhtml#a352cdd00957d729e5e37d1895d8e3dad">m_workingThreads</a> == 0;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a9fefa088d9022fdb08b6001c18b1a357">  291</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classcbThreadPool.xhtml#a9fefa088d9022fdb08b6001c18b1a357">cbThreadPool::BatchBegin</a>()</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  wxMutexLocker lock(<a class="code" href="classcbThreadPool.xhtml#a69199fbb98970a3d16bc0a54fbd29cfa">m_Mutex</a>);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <a class="code" href="classcbThreadPool.xhtml#a0fbccda9298660730efed413e8b84750">m_batching</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a359b3827cdfbd4fff10d1aa4b6fa0dae">  297</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classcbThreadPool.xhtml#a359b3827cdfbd4fff10d1aa4b6fa0dae">cbThreadPool::Broadcast</a>()</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  <span class="comment">// if m_concurrentThreads == -1, which means the pool is not initialized yet</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">m_concurrentThreads</a> == -1)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="comment">// let the idle(pending) worker thread to execute tasks, those worker threads are waiting for semaphore</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; static_cast&lt;std::size_t&gt;(<a class="code" href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">m_concurrentThreads</a> - <a class="code" href="classcbThreadPool.xhtml#a352cdd00957d729e5e37d1895d8e3dad">m_workingThreads</a>); ++i)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="classcbThreadPool.xhtml#a810a0448ebb198e02502b413cccbafd8">m_semaphore</a>-&gt;Post();</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div>
<div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classcbThreadPool.xhtml#a2a6fb53db233bca4d16589193d0c92ea">  307</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classcbThreadPool.xhtml#a2a6fb53db233bca4d16589193d0c92ea">cbThreadPool::AwakeNeeded</a>()</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;{</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="comment">// if m_concurrentThreads == -1, which means the pool is not initialized yet</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">m_concurrentThreads</a> == -1)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  <span class="comment">// the thread number to awake should be less than the idle thread number and the tasks queue&#39;s size</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  std::size_t awakeThreadNumber = std::min&lt;std::size_t&gt;(<a class="code" href="classcbThreadPool.xhtml#abdf43b1e2415efaf8e199796890d9400">m_tasksQueue</a>.size(),</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                                        (<a class="code" href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">m_concurrentThreads</a> - <a class="code" href="classcbThreadPool.xhtml#a352cdd00957d729e5e37d1895d8e3dad">m_workingThreads</a>));</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; awakeThreadNumber; ++i)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="classcbThreadPool.xhtml#a810a0448ebb198e02502b413cccbafd8">m_semaphore</a>-&gt;Post();</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">/* *** Josuttis&#39; CountedPtr *** */</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#a20f98d4ff403ca74dd158f3b39efb3cd">  323</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#a20f98d4ff403ca74dd158f3b39efb3cd">cbThreadPool::CountedPtr&lt;T&gt;::CountedPtr</a>(T *p)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;: ptr(p),</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  count(new long(1))</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;{</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  <span class="comment">// empty</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#a4b126fb2834d4fc72a792170a09429b5">  331</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#a20f98d4ff403ca74dd158f3b39efb3cd">cbThreadPool::CountedPtr&lt;T&gt;::CountedPtr</a>(<span class="keyword">const</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr&lt;T&gt;</a> &amp;p) <span class="keywordflow">throw</span>()</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;: <a class="code" href="namespaceParserConsts.xhtml#ae062440782c11184e4ef0a89a88d539a">ptr</a>(p.ptr),</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  count(p.count)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  ++*count;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#a0a12c8d0aa61c4f8133c98730164d515">  339</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#a0a12c8d0aa61c4f8133c98730164d515">cbThreadPool::CountedPtr&lt;T&gt;::~CountedPtr</a>() throw()</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  dispose();</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00345"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#aff0cc7e1128490eca3e2de704b0e5330">  345</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">cbThreadPool::CountedPtr&lt;T&gt;</a> &amp;<a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#aff0cc7e1128490eca3e2de704b0e5330">cbThreadPool::CountedPtr&lt;T&gt;::operator = </a>(<span class="keyword">const</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml">CountedPtr&lt;T&gt;</a> &amp;p) <span class="keywordflow">throw</span>()</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;p)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    dispose();</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    ptr = p.ptr;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    count = p.count;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    ++*count;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#a1714377984c3d06099bfe16f821cc8af">  359</a></span>&#160;<span class="keyword">inline</span> T &amp;<a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#a1714377984c3d06099bfe16f821cc8af">cbThreadPool::CountedPtr&lt;T&gt;::operator * </a>() <span class="keyword">const</span> throw()</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  <span class="keywordflow">return</span> *<a class="code" href="namespaceParserConsts.xhtml#ae062440782c11184e4ef0a89a88d539a">ptr</a>;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#a0b74d984b19e8fd4341e8ecb73f713e3">  365</a></span>&#160;<span class="keyword">inline</span> T *<a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#a0b74d984b19e8fd4341e8ecb73f713e3">cbThreadPool::CountedPtr&lt;T&gt;::operator -&gt; </a>() <span class="keyword">const</span> throw()</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="namespaceParserConsts.xhtml#ae062440782c11184e4ef0a89a88d539a">ptr</a>;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00371"></a><span class="lineno"><a class="line" href="classcbThreadPool_1_1CountedPtr.xhtml#af55269a902bc1a03a8c7535b7f8f0cee">  371</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classcbThreadPool_1_1CountedPtr.xhtml#af55269a902bc1a03a8c7535b7f8f0cee">cbThreadPool::CountedPtr&lt;T&gt;::dispose</a>()</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;{</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="keywordflow">if</span> (--*count == 0)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">delete</span> count;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">delete</span> <a class="code" href="namespaceParserConsts.xhtml#ae062440782c11184e4ef0a89a88d539a">ptr</a>;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#endif  //CBTHREADPOOL_H</span></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_aff0cc7e1128490eca3e2de704b0e5330"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#aff0cc7e1128490eca3e2de704b0e5330">cbThreadPool::CountedPtr::operator=</a></div><div class="ttdeci">CountedPtr&lt; T &gt; &amp; operator=(const CountedPtr&lt; T &gt; &amp;p)</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:345</div></div>
<div class="ttc" id="prep_8h_xhtml"><div class="ttname"><a href="prep_8h.xhtml">prep.h</a></div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a5a39495772bd50d7beff8390325f802a"><div class="ttname"><a href="classcbThreadPool.xhtml#a5a39495772bd50d7beff8390325f802a">cbThreadPool::SetConcurrentThreads</a></div><div class="ttdeci">void SetConcurrentThreads(int concurrentThreads)</div><div class="ttdef"><b>Definition:</b> cbthreadpool.cpp:32</div></div>
<div class="ttc" id="structcbThreadPool_1_1cbThreadedTaskElement_xhtml_a6985bd1d08ebefbc3e12b8ae29d282b4"><div class="ttname"><a href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#a6985bd1d08ebefbc3e12b8ae29d282b4">cbThreadPool::cbThreadedTaskElement::task</a></div><div class="ttdeci">cbThreadedTask * task</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:179</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_aa18516a470a7b247852b520d81cc1912"><div class="ttname"><a href="classcbThreadPool.xhtml#aa18516a470a7b247852b520d81cc1912">cbThreadPool::GetId</a></div><div class="ttdeci">int GetId() const </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:49</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a1a28b9a6ac7fb3dff239ded95ca2b597"><div class="ttname"><a href="classcbThreadPool.xhtml#a1a28b9a6ac7fb3dff239ded95ca2b597">cbThreadPool::GetConcurrentThreads</a></div><div class="ttdeci">int GetConcurrentThreads() const </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:279</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_af55269a902bc1a03a8c7535b7f8f0cee"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#af55269a902bc1a03a8c7535b7f8f0cee">cbThreadPool::CountedPtr::dispose</a></div><div class="ttdeci">void dispose()</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:371</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_a1714377984c3d06099bfe16f821cc8af"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#a1714377984c3d06099bfe16f821cc8af">cbThreadPool::CountedPtr::operator*</a></div><div class="ttdeci">T &amp; operator*() const </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:359</div></div>
<div class="ttc" id="settings_8h_xhtml_aae8fdf6bcc88c172ca8a75ad80f17a95"><div class="ttname"><a href="settings_8h.xhtml#aae8fdf6bcc88c172ca8a75ad80f17a95">DLLIMPORT</a></div><div class="ttdeci">#define DLLIMPORT</div><div class="ttdef"><b>Definition:</b> settings.h:16</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a76b8e09dfd610b36e62c92e3ef6e194b"><div class="ttname"><a href="classcbThreadPool.xhtml#a76b8e09dfd610b36e62c92e3ef6e194b">cbThreadPool::TasksQueue</a></div><div class="ttdeci">std::list&lt; cbThreadedTaskElement &gt; TasksQueue</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:183</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_ad795dc459b74be6a3455de3f24cadb32"><div class="ttname"><a href="classcbThreadPool.xhtml#ad795dc459b74be6a3455de3f24cadb32">cbThreadPool::m_concurrentThreads</a></div><div class="ttdeci">int m_concurrentThreads</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:191</div></div>
<div class="ttc" id="classcbThreadedTask_xhtml"><div class="ttname"><a href="classcbThreadedTask.xhtml">cbThreadedTask</a></div><div class="ttdef"><b>Definition:</b> cbthreadedtask.h:13</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_a20f98d4ff403ca74dd158f3b39efb3cd"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#a20f98d4ff403ca74dd158f3b39efb3cd">cbThreadPool::CountedPtr::CountedPtr</a></div><div class="ttdeci">CountedPtr(T *p=0)</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:323</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a42760ffb005c34832e2cbf15ef642144"><div class="ttname"><a href="classcbThreadPool.xhtml#a42760ffb005c34832e2cbf15ef642144">cbThreadPool::m_ID</a></div><div class="ttdeci">int m_ID</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:186</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a352cdd00957d729e5e37d1895d8e3dad"><div class="ttname"><a href="classcbThreadPool.xhtml#a352cdd00957d729e5e37d1895d8e3dad">cbThreadPool::m_workingThreads</a></div><div class="ttdeci">int m_workingThreads</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:211</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_ac2fb989a07ad9a99ff99be235d32e5dc"><div class="ttname"><a href="classcbThreadPool.xhtml#ac2fb989a07ad9a99ff99be235d32e5dc">cbThreadPool::WorkerThreadsArray</a></div><div class="ttdeci">std::vector&lt; cbWorkerThread * &gt; WorkerThreadsArray</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:157</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a410ba875cd41fa884cd22391acbaba8a"><div class="ttname"><a href="classcbThreadPool.xhtml#a410ba875cd41fa884cd22391acbaba8a">cbThreadPool::cbThreadPool</a></div><div class="ttdeci">cbThreadPool(wxEvtHandler *owner, int id=-1, int concurrentThreads=-1, unsigned int stackSize=0)</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:264</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a25fe7ba24172c29abc0b47c18d518f76"><div class="ttname"><a href="classcbThreadPool.xhtml#a25fe7ba24172c29abc0b47c18d518f76">cbThreadPool::m_pOwner</a></div><div class="ttdeci">wxEvtHandler * m_pOwner</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:185</div></div>
<div class="ttc" id="structcbThreadPool_1_1cbThreadedTaskElement_xhtml_af42b56648c5ce11ac5b3f9f5063fa082"><div class="ttname"><a href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#af42b56648c5ce11ac5b3f9f5063fa082">cbThreadPool::cbThreadedTaskElement::Delete</a></div><div class="ttdeci">void Delete()</div><div class="ttdoc">It&#39;ll delete the task only if it was set to. </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:170</div></div>
<div class="ttc" id="cbthreadedtask_8h_xhtml"><div class="ttname"><a href="cbthreadedtask_8h.xhtml">cbthreadedtask.h</a></div></div>
<div class="ttc" id="classcbThreadPool_1_1cbWorkerThread_xhtml_a8c893d611b37f7608b988acd9d835aa3"><div class="ttname"><a href="classcbThreadPool_1_1cbWorkerThread.xhtml#a8c893d611b37f7608b988acd9d835aa3">cbThreadPool::cbWorkerThread::m_pTask</a></div><div class="ttdeci">cbThreadedTask * m_pTask</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:153</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_aa8e5c264770f8934e49211febd399da4"><div class="ttname"><a href="classcbThreadPool.xhtml#aa8e5c264770f8934e49211febd399da4">cbThreadPool::m_threads</a></div><div class="ttdeci">WorkerThreadsArray m_threads</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:200</div></div>
<div class="ttc" id="classcbThreadPool_1_1cbWorkerThread_xhtml_ab18a3a50d37f170b73c32ab61bd7e341"><div class="ttname"><a href="classcbThreadPool_1_1cbWorkerThread.xhtml#ab18a3a50d37f170b73c32ab61bd7e341">cbThreadPool::cbWorkerThread::m_abort</a></div><div class="ttdeci">bool m_abort</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:149</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a359b3827cdfbd4fff10d1aa4b6fa0dae"><div class="ttname"><a href="classcbThreadPool.xhtml#a359b3827cdfbd4fff10d1aa4b6fa0dae">cbThreadPool::Broadcast</a></div><div class="ttdeci">void Broadcast()</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:297</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_ac19335d0513fa16c010ac61d3f458d05"><div class="ttname"><a href="classcbThreadPool.xhtml#ac19335d0513fa16c010ac61d3f458d05">cbThreadPool::Done</a></div><div class="ttdeci">bool Done() const </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:285</div></div>
<div class="ttc" id="classcbThreadPool_1_1cbWorkerThread_xhtml"><div class="ttname"><a href="classcbThreadPool_1_1cbWorkerThread.xhtml">cbThreadPool::cbWorkerThread</a></div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:122</div></div>
<div class="ttc" id="classcbThreadPool_1_1cbWorkerThread_xhtml_a12afce991a6d70dd8633dbb8c793bad6"><div class="ttname"><a href="classcbThreadPool_1_1cbWorkerThread.xhtml#a12afce991a6d70dd8633dbb8c793bad6">cbThreadPool::cbWorkerThread::m_semaphore</a></div><div class="ttdeci">CountedPtr&lt; wxSemaphore &gt; m_semaphore</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:152</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml">cbThreadPool::CountedPtr</a></div><div class="ttdoc">Josuttis&#39; implementation of CountedPtr. </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:93</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_a8b2337426fda6b6b972b3976aaf9c005"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#a8b2337426fda6b6b972b3976aaf9c005">cbThreadPool::CountedPtr::count</a></div><div class="ttdeci">long * count</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:97</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a0fbccda9298660730efed413e8b84750"><div class="ttname"><a href="classcbThreadPool.xhtml#a0fbccda9298660730efed413e8b84750">cbThreadPool::m_batching</a></div><div class="ttdeci">bool m_batching</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:187</div></div>
<div class="ttc" id="classcbThreadPool_1_1cbWorkerThread_xhtml_acd2e52b4163c12e67abd94dde384d9d3"><div class="ttname"><a href="classcbThreadPool_1_1cbWorkerThread.xhtml#acd2e52b4163c12e67abd94dde384d9d3">cbThreadPool::cbWorkerThread::m_pPool</a></div><div class="ttdeci">cbThreadPool * m_pPool</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:150</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_a0a12c8d0aa61c4f8133c98730164d515"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#a0a12c8d0aa61c4f8133c98730164d515">cbThreadPool::CountedPtr::~CountedPtr</a></div><div class="ttdeci">~CountedPtr()</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:339</div></div>
<div class="ttc" id="structcbThreadPool_1_1cbThreadedTaskElement_xhtml_ae0121c3d346e2f0ca72b59cc3e96dfc2"><div class="ttname"><a href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#ae0121c3d346e2f0ca72b59cc3e96dfc2">cbThreadPool::cbThreadedTaskElement::cbThreadedTaskElement</a></div><div class="ttdeci">cbThreadedTaskElement(cbThreadedTask *_task=nullptr, bool _autodelete=false)</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:162</div></div>
<div class="ttc" id="namespaceParserConsts_xhtml_ae062440782c11184e4ef0a89a88d539a"><div class="ttname"><a href="namespaceParserConsts.xhtml#ae062440782c11184e4ef0a89a88d539a">ParserConsts::ptr</a></div><div class="ttdeci">const wxString ptr(_T(&quot;*&quot;))</div></div>
<div class="ttc" id="settings_8h_xhtml"><div class="ttname"><a href="settings_8h.xhtml">settings.h</a></div></div>
<div class="ttc" id="classcbThreadPool_xhtml_ad2152884ee6df9ad1772dfe2c879906b"><div class="ttname"><a href="classcbThreadPool.xhtml#ad2152884ee6df9ad1772dfe2c879906b">cbThreadPool::m_stackSize</a></div><div class="ttdeci">unsigned int m_stackSize</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:192</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_aa1516ed39ec647bd4133375b21d9ddf8"><div class="ttname"><a href="classcbThreadPool.xhtml#aa1516ed39ec647bd4133375b21d9ddf8">cbThreadPool::m_concurrentThreadsSchedule</a></div><div class="ttdeci">int m_concurrentThreadsSchedule</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:196</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_aa958980fe778911e2c863905f7c4fb7d"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#aa958980fe778911e2c863905f7c4fb7d">cbThreadPool::CountedPtr::ptr</a></div><div class="ttdeci">T * ptr</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:96</div></div>
<div class="ttc" id="structcbThreadPool_1_1cbThreadedTaskElement_xhtml_aa55d258bb692838a6beae4d808733735"><div class="ttname"><a href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml#aa55d258bb692838a6beae4d808733735">cbThreadPool::cbThreadedTaskElement::autodelete</a></div><div class="ttdeci">bool autodelete</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:180</div></div>
<div class="ttc" id="classcbThreadPool_1_1cbWorkerThread_xhtml_ac01dec50e4dc4b40abc9b28e123a8181"><div class="ttname"><a href="classcbThreadPool_1_1cbWorkerThread.xhtml#ac01dec50e4dc4b40abc9b28e123a8181">cbThreadPool::cbWorkerThread::m_taskMutex</a></div><div class="ttdeci">wxMutex m_taskMutex</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:154</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a69199fbb98970a3d16bc0a54fbd29cfa"><div class="ttname"><a href="classcbThreadPool.xhtml#a69199fbb98970a3d16bc0a54fbd29cfa">cbThreadPool::m_Mutex</a></div><div class="ttdeci">wxMutex m_Mutex</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:213</div></div>
<div class="ttc" id="classcbThreadPool_1_1CountedPtr_xhtml_a0b74d984b19e8fd4341e8ecb73f713e3"><div class="ttname"><a href="classcbThreadPool_1_1CountedPtr.xhtml#a0b74d984b19e8fd4341e8ecb73f713e3">cbThreadPool::CountedPtr::operator-&gt;</a></div><div class="ttdeci">T * operator-&gt;() const </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:365</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_abdf43b1e2415efaf8e199796890d9400"><div class="ttname"><a href="classcbThreadPool.xhtml#abdf43b1e2415efaf8e199796890d9400">cbThreadPool::m_tasksQueue</a></div><div class="ttdeci">TasksQueue m_tasksQueue</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:206</div></div>
<div class="ttc" id="classcbThreadPool_xhtml"><div class="ttname"><a href="classcbThreadPool.xhtml">cbThreadPool</a></div><div class="ttdoc">A Thread Pool implementation. </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:19</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a810a0448ebb198e02502b413cccbafd8"><div class="ttname"><a href="classcbThreadPool.xhtml#a810a0448ebb198e02502b413cccbafd8">cbThreadPool::m_semaphore</a></div><div class="ttdeci">CountedPtr&lt; wxSemaphore &gt; m_semaphore</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:218</div></div>
<div class="ttc" id="structcbThreadPool_1_1cbThreadedTaskElement_xhtml"><div class="ttname"><a href="structcbThreadPool_1_1cbThreadedTaskElement.xhtml">cbThreadPool::cbThreadedTaskElement</a></div><div class="ttdoc">All tasks are added to one of these. It&#39;ll also save the autodelete value. </div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:160</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a9fefa088d9022fdb08b6001c18b1a357"><div class="ttname"><a href="classcbThreadPool.xhtml#a9fefa088d9022fdb08b6001c18b1a357">cbThreadPool::BatchBegin</a></div><div class="ttdeci">void BatchBegin()</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:291</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_ad48ac7048eab2e87f3324d952f5c4c84"><div class="ttname"><a href="classcbThreadPool.xhtml#ad48ac7048eab2e87f3324d952f5c4c84">cbThreadPool::m_taskAdded</a></div><div class="ttdeci">bool m_taskAdded</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:209</div></div>
<div class="ttc" id="classcbThreadPool_xhtml_a2a6fb53db233bca4d16589193d0c92ea"><div class="ttname"><a href="classcbThreadPool.xhtml#a2a6fb53db233bca4d16589193d0c92ea">cbThreadPool::AwakeNeeded</a></div><div class="ttdeci">void AwakeNeeded()</div><div class="ttdef"><b>Definition:</b> cbthreadpool.h:307</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.8
</small></address>
</body>
</html>
