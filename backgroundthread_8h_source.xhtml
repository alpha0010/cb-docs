<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.8"/>
<title>Code::Blocks: backgroundthread.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Code::Blocks
   &#160;<span id="projectnumber">SVN r10078</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.8 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">backgroundthread.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="backgroundthread_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * This file is part of the Code::Blocks IDE and licensed under the GNU Lesser General Public License, version 3</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * http://www.gnu.org/licenses/lgpl-3.0.html</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#ifndef BACKGROUNDTHREAD_H</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#define BACKGROUNDTHREAD_H</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="safedelete_8h.xhtml">safedelete.h</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#undef new</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;deque&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;wx/timer.h&gt;</span> <span class="comment">// wxMilliSleep</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;wx/thread.h&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="manager_8h.xhtml">manager.h</a>&quot;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="blockallocated_8h.xhtml">blockallocated.h</a>&quot;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">* BackgroundThread is a lightweight single background worker thread implementation for situations in which</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">* you simply want to do one or several things in another thread, and using a thread pool is overkill.</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">* Also, several BackgroundThreads can be used in situations where a thread pool is unsuitable by design. For example,</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">* you can use two BackgroundThreads to asynchronously read a list of files from disk one at at time and download another list</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">* of files from the internet without hogging either the hard disk or the network layer with more than one concurrent access.</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">* BackgroundThread can be configured to own the job objects (will delete them after running) or not. It can also own</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">* the semaphore and queue, or use a shared context.</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">* BackgroundThreadPool is a low overhead thread pool implementation around BackgroundThread.</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classAbstractJob.xhtml">   35</a></span>&#160;<span class="keyword">class </span><a class="code" href="classAbstractJob.xhtml">AbstractJob</a></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classAbstractJob.xhtml#af4739fb0efcef64a752db241b823a462">   38</a></span>&#160;    <a class="code" href="classAbstractJob.xhtml#af4739fb0efcef64a752db241b823a462">AbstractJob</a>(){};</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classAbstractJob.xhtml#ad2b39aa5d2f915f7503120d6bff4736b">   39</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classAbstractJob.xhtml#ad2b39aa5d2f915f7503120d6bff4736b">~AbstractJob</a>(){};</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classAbstractJob.xhtml#a5b954cf5047373d836ba2ab4e871904a">operator()</a>() = 0;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;};</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classJobQueue.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classJobQueue.xhtml">JobQueue</a> : <span class="keyword">public</span> std::deque&lt;AbstractJob*&gt;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classJobQueue.xhtml#a1ebc0fe54f5dd11d142e0ef9e583df19">   47</a></span>&#160;    wxCriticalSection <a class="code" href="classJobQueue.xhtml#a1ebc0fe54f5dd11d142e0ef9e583df19">c</a>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classJobQueue.xhtml#a9aed4859a1525ead9d08847129a2fe70">   50</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classJobQueue.xhtml#a9aed4859a1525ead9d08847129a2fe70">Push</a>(<a class="code" href="classAbstractJob.xhtml">AbstractJob</a> *j)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        wxCriticalSectionLocker l(c);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        push_back(j);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    };</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classJobQueue.xhtml#aac34ef91c7944497badbc4dd7c5d4552">   55</a></span>&#160;    <a class="code" href="classAbstractJob.xhtml">AbstractJob</a>* <a class="code" href="classJobQueue.xhtml#aac34ef91c7944497badbc4dd7c5d4552">Pop</a>()</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        wxCriticalSectionLocker l(c);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="classAbstractJob.xhtml">AbstractJob</a>* j = front();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        pop_front();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> j;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    };</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;};</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml">   66</a></span>&#160;<span class="keyword">class </span><a class="code" href="classBackgroundThread.xhtml">BackgroundThread</a> : <span class="keyword">public</span> wxThread</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a2ceea636661f778474565f979e8372ce">   68</a></span>&#160;    <a class="code" href="classJobQueue.xhtml">JobQueue</a> *<a class="code" href="classBackgroundThread.xhtml#a2ceea636661f778474565f979e8372ce">queue</a>;</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a4c19f248535e0bd43ea4ee53538c3704">   69</a></span>&#160;    wxSemaphore *<a class="code" href="classBackgroundThread.xhtml#a4c19f248535e0bd43ea4ee53538c3704">semaphore</a>;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a8bbadc73c58392abd9adadebcb21bcf0">   70</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classBackgroundThread.xhtml#a8bbadc73c58392abd9adadebcb21bcf0">die</a>;</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#acae9c124006f54b17da264512526d70f">   71</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classBackgroundThread.xhtml#acae9c124006f54b17da264512526d70f">ownsQueue</a>;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#ab924d649472f4621fa2dbb65eeb6e29d">   72</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classBackgroundThread.xhtml#ab924d649472f4621fa2dbb65eeb6e29d">ownsSemaphore</a>;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a59b4770394bb0b3272fc7fc67755a35a">   73</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classBackgroundThread.xhtml#a59b4770394bb0b3272fc7fc67755a35a">ownsJobs</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a6149c81e452ccca847eb5cd950af1884">   76</a></span>&#160;    <a class="code" href="classBackgroundThread.xhtml#a6149c81e452ccca847eb5cd950af1884">BackgroundThread</a>(<a class="code" href="classJobQueue.xhtml">JobQueue</a> *q, wxSemaphore *s, <span class="keyword">const</span> <span class="keywordtype">bool</span> owns_jobs = <span class="keyword">true</span>)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    : queue(q), semaphore(s), die(false), ownsQueue(false), ownsSemaphore(false), ownsJobs(owns_jobs)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        Create();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        Run();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    };</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#ad3a86ccb294c858b03b54bbceb595f7a">   83</a></span>&#160;    <a class="code" href="classBackgroundThread.xhtml#ad3a86ccb294c858b03b54bbceb595f7a">BackgroundThread</a>(wxSemaphore *s, <span class="keyword">const</span> <span class="keywordtype">bool</span> owns_jobs = <span class="keyword">true</span>)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    : queue(new <a class="code" href="classJobQueue.xhtml">JobQueue</a>), semaphore(s), die(false), ownsQueue(true), ownsSemaphore(false), ownsJobs(owns_jobs)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        Create();</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        Run();</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    };</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#adc75ff7160d2715de4e9d5d2a65e8724">   90</a></span>&#160;    <a class="code" href="classBackgroundThread.xhtml#adc75ff7160d2715de4e9d5d2a65e8724">BackgroundThread</a>(<a class="code" href="classJobQueue.xhtml">JobQueue</a> *q, <span class="keyword">const</span> <span class="keywordtype">bool</span> owns_jobs = <span class="keyword">true</span>)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    : queue(q), semaphore(new wxSemaphore), die(false), ownsQueue(false), ownsSemaphore(true), ownsJobs(owns_jobs)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        Create();</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        Run();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    };</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#aac4d54d3eb4d879be0a09baa31352f7c">   97</a></span>&#160;    <a class="code" href="classBackgroundThread.xhtml#aac4d54d3eb4d879be0a09baa31352f7c">BackgroundThread</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> owns_jobs = <span class="keyword">true</span>)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    : queue(new <a class="code" href="classJobQueue.xhtml">JobQueue</a>), semaphore(new wxSemaphore), die(false), ownsQueue(true), ownsSemaphore(true), ownsJobs(owns_jobs)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        Create();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        Run();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    };</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a584178ed1da2d80a75feb33f795f35ea">  104</a></span>&#160;    <a class="code" href="classBackgroundThread.xhtml#a584178ed1da2d80a75feb33f795f35ea">~BackgroundThread</a>()</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span> (ownsSemaphore)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <a class="code" href="safedelete_8h.xhtml#af855c31ddf331947121e188b8bb631c2">::Delete</a>(semaphore);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">if</span> (ownsQueue)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <a class="code" href="safedelete_8h.xhtml#af855c31ddf331947121e188b8bb631c2">::Delete</a>(queue);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    };</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a16bb8d905300baae3caa37230174e9cc">  113</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classBackgroundThread.xhtml#a16bb8d905300baae3caa37230174e9cc">Queue</a>(<a class="code" href="classAbstractJob.xhtml">AbstractJob</a>* j)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        queue-&gt;<a class="code" href="classJobQueue.xhtml#a9aed4859a1525ead9d08847129a2fe70">Push</a>(j);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        semaphore-&gt;Post();</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    };</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a86efc91b90e29fffd40b398ecd6d2114">  119</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classBackgroundThread.xhtml#a86efc91b90e29fffd40b398ecd6d2114">Die</a>()</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        die = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        semaphore-&gt;Post();</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        wxMilliSleep(0);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    };</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a34fd4ac7adabe5b3bafb07cb24ffad51">  127</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classBackgroundThread.xhtml#a34fd4ac7adabe5b3bafb07cb24ffad51">MarkDying</a>() <span class="comment">// Need this for threadpool. Die() alone does not work in shared context (for obvious reason).</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        die = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    };</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">    * This function is inherently unsafe!</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">    * Also, if used on a thread belonging to a pool, it will not do what you think it does!</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">    * Do not use this function unless you are sure you really know what you are doing.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#a76e8e10bcb323552fbdbe3642aa34f15">  137</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classBackgroundThread.xhtml#a76e8e10bcb323552fbdbe3642aa34f15">MurderDeathKill</a>()</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="classBackgroundThread.xhtml#a86efc91b90e29fffd40b398ecd6d2114">Die</a>();</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        wxMilliSleep(0);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        wxMilliSleep(0);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">this</span> &amp;&amp; IsRunning())</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            Kill();</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    };</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classBackgroundThread.xhtml#ad3f8a13fa4577a52fffd7f6fed0c4eed">  147</a></span>&#160;    ExitCode <a class="code" href="classBackgroundThread.xhtml#ad3f8a13fa4577a52fffd7f6fed0c4eed">Entry</a>()</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="classAbstractJob.xhtml">AbstractJob</a>* job;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">for</span> (;;)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            semaphore-&gt;Wait();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">if</span> (die)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            job = queue-&gt;<a class="code" href="classJobQueue.xhtml#aac34ef91c7944497badbc4dd7c5d4552">Pop</a>();</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">if</span> ( job )</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                (*job)();</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">if</span> (ownsJobs)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">delete</span> job;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    };</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;};</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="structAgony.xhtml#acfd7ee8344f7d25da174a135eb3ed217">  171</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structAgony.xhtml">Agony</a> { <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="structAgony.xhtml#acfd7ee8344f7d25da174a135eb3ed217">operator()</a>(<a class="code" href="classBackgroundThread.xhtml">BackgroundThread</a>* t){t-&gt;<a class="code" href="classBackgroundThread.xhtml#a34fd4ac7adabe5b3bafb07cb24ffad51">MarkDying</a>();}; };</div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="structDeath.xhtml#afc132d0e965bda5e28711f4017ca2c95">  172</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structDeath.xhtml">Death</a> { <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="structDeath.xhtml#afc132d0e965bda5e28711f4017ca2c95">operator()</a>(<a class="code" href="classBackgroundThread.xhtml">BackgroundThread</a>* t){t-&gt;<a class="code" href="classBackgroundThread.xhtml#a86efc91b90e29fffd40b398ecd6d2114">Die</a>();}; };</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml">  174</a></span>&#160;<span class="keyword">class </span><a class="code" href="classBackgroundThreadPool.xhtml">BackgroundThreadPool</a></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#a3855be4530b3cc432df213003b67fa7a">  176</a></span>&#160;    <span class="keyword">typedef</span> std::list&lt;BackgroundThread*&gt; <a class="code" href="classBackgroundThreadPool.xhtml#a3855be4530b3cc432df213003b67fa7a">ThreadList</a>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#a42a7e5fffe9b09df76999e63e812a930">  178</a></span>&#160;    <a class="code" href="classJobQueue.xhtml">JobQueue</a> <a class="code" href="classBackgroundThreadPool.xhtml#a42a7e5fffe9b09df76999e63e812a930">queue</a>;</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#a8a9fd3ec7ccedb275a4c94e5561b8066">  179</a></span>&#160;    wxSemaphore <a class="code" href="classBackgroundThreadPool.xhtml#a8a9fd3ec7ccedb275a4c94e5561b8066">semaphore</a>;</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#a7c71d3bc7f8b544de763221f58228f1f">  180</a></span>&#160;    ThreadList <a class="code" href="classBackgroundThreadPool.xhtml#a7c71d3bc7f8b544de763221f58228f1f">threadList</a>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#abfd5383fc16778434d31d3ba8d282331">  183</a></span>&#160;    <a class="code" href="classBackgroundThreadPool.xhtml#abfd5383fc16778434d31d3ba8d282331">BackgroundThreadPool</a>(<span class="keywordtype">size_t</span> num_threads = 4)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_threads; ++i)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <a class="code" href="classBackgroundThreadPool.xhtml#afe56b52a28960647092583a2e7b633d7">AddThread</a>(<span class="keyword">new</span> <a class="code" href="classBackgroundThread.xhtml">BackgroundThread</a>(&amp;queue, &amp;semaphore));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    };</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#ae92eaf5d3b4bcaa6e2ddc1347f3c2df2">  189</a></span>&#160;    <a class="code" href="classBackgroundThreadPool.xhtml#ae92eaf5d3b4bcaa6e2ddc1347f3c2df2">~BackgroundThreadPool</a>()</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        for_each(threadList.begin(), threadList.end(), <a class="code" href="structAgony.xhtml">Agony</a>());</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        for_each(threadList.begin(), threadList.end(), <a class="code" href="structDeath.xhtml">Death</a>());</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <a class="code" href="safedelete_8h.xhtml#af855c31ddf331947121e188b8bb631c2">Delete</a>(queue);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        wxMilliSleep(0);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    };</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#afe56b52a28960647092583a2e7b633d7">  197</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classBackgroundThreadPool.xhtml#afe56b52a28960647092583a2e7b633d7">AddThread</a>(<a class="code" href="classBackgroundThread.xhtml">BackgroundThread</a> * t)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        threadList.push_back(t);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    };</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classBackgroundThreadPool.xhtml#aa692a057bb56ffb3be9b8c1d549dca69">  202</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classBackgroundThreadPool.xhtml#aa692a057bb56ffb3be9b8c1d549dca69">Queue</a>(<a class="code" href="classAbstractJob.xhtml">AbstractJob</a>* j)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        queue.<a class="code" href="classJobQueue.xhtml#a9aed4859a1525ead9d08847129a2fe70">Push</a>(j);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        semaphore.Post();</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    };</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_a3855be4530b3cc432df213003b67fa7a"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#a3855be4530b3cc432df213003b67fa7a">BackgroundThreadPool::ThreadList</a></div><div class="ttdeci">std::list&lt; BackgroundThread * &gt; ThreadList</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:176</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_acae9c124006f54b17da264512526d70f"><div class="ttname"><a href="classBackgroundThread.xhtml#acae9c124006f54b17da264512526d70f">BackgroundThread::ownsQueue</a></div><div class="ttdeci">const bool ownsQueue</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:71</div></div>
<div class="ttc" id="classAbstractJob_xhtml_af4739fb0efcef64a752db241b823a462"><div class="ttname"><a href="classAbstractJob.xhtml#af4739fb0efcef64a752db241b823a462">AbstractJob::AbstractJob</a></div><div class="ttdeci">AbstractJob()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:38</div></div>
<div class="ttc" id="classAbstractJob_xhtml_a5b954cf5047373d836ba2ab4e871904a"><div class="ttname"><a href="classAbstractJob.xhtml#a5b954cf5047373d836ba2ab4e871904a">AbstractJob::operator()</a></div><div class="ttdeci">virtual void operator()()=0</div></div>
<div class="ttc" id="classAbstractJob_xhtml"><div class="ttname"><a href="classAbstractJob.xhtml">AbstractJob</a></div><div class="ttdef"><b>Definition:</b> backgroundthread.h:35</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a76e8e10bcb323552fbdbe3642aa34f15"><div class="ttname"><a href="classBackgroundThread.xhtml#a76e8e10bcb323552fbdbe3642aa34f15">BackgroundThread::MurderDeathKill</a></div><div class="ttdeci">void MurderDeathKill()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:137</div></div>
<div class="ttc" id="classAbstractJob_xhtml_ad2b39aa5d2f915f7503120d6bff4736b"><div class="ttname"><a href="classAbstractJob.xhtml#ad2b39aa5d2f915f7503120d6bff4736b">AbstractJob::~AbstractJob</a></div><div class="ttdeci">virtual ~AbstractJob()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:39</div></div>
<div class="ttc" id="blockallocated_8h_xhtml"><div class="ttname"><a href="blockallocated_8h.xhtml">blockallocated.h</a></div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_a42a7e5fffe9b09df76999e63e812a930"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#a42a7e5fffe9b09df76999e63e812a930">BackgroundThreadPool::queue</a></div><div class="ttdeci">JobQueue queue</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:178</div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_a7c71d3bc7f8b544de763221f58228f1f"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#a7c71d3bc7f8b544de763221f58228f1f">BackgroundThreadPool::threadList</a></div><div class="ttdeci">ThreadList threadList</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:180</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a2ceea636661f778474565f979e8372ce"><div class="ttname"><a href="classBackgroundThread.xhtml#a2ceea636661f778474565f979e8372ce">BackgroundThread::queue</a></div><div class="ttdeci">JobQueue * queue</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:68</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a6149c81e452ccca847eb5cd950af1884"><div class="ttname"><a href="classBackgroundThread.xhtml#a6149c81e452ccca847eb5cd950af1884">BackgroundThread::BackgroundThread</a></div><div class="ttdeci">BackgroundThread(JobQueue *q, wxSemaphore *s, const bool owns_jobs=true)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:76</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_ad3a86ccb294c858b03b54bbceb595f7a"><div class="ttname"><a href="classBackgroundThread.xhtml#ad3a86ccb294c858b03b54bbceb595f7a">BackgroundThread::BackgroundThread</a></div><div class="ttdeci">BackgroundThread(wxSemaphore *s, const bool owns_jobs=true)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:83</div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_ae92eaf5d3b4bcaa6e2ddc1347f3c2df2"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#ae92eaf5d3b4bcaa6e2ddc1347f3c2df2">BackgroundThreadPool::~BackgroundThreadPool</a></div><div class="ttdeci">~BackgroundThreadPool()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:189</div></div>
<div class="ttc" id="structAgony_xhtml_acfd7ee8344f7d25da174a135eb3ed217"><div class="ttname"><a href="structAgony.xhtml#acfd7ee8344f7d25da174a135eb3ed217">Agony::operator()</a></div><div class="ttdeci">void operator()(BackgroundThread *t)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:171</div></div>
<div class="ttc" id="classJobQueue_xhtml_a9aed4859a1525ead9d08847129a2fe70"><div class="ttname"><a href="classJobQueue.xhtml#a9aed4859a1525ead9d08847129a2fe70">JobQueue::Push</a></div><div class="ttdeci">void Push(AbstractJob *j)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:50</div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_abfd5383fc16778434d31d3ba8d282331"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#abfd5383fc16778434d31d3ba8d282331">BackgroundThreadPool::BackgroundThreadPool</a></div><div class="ttdeci">BackgroundThreadPool(size_t num_threads=4)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:183</div></div>
<div class="ttc" id="classBackgroundThread_xhtml"><div class="ttname"><a href="classBackgroundThread.xhtml">BackgroundThread</a></div><div class="ttdef"><b>Definition:</b> backgroundthread.h:66</div></div>
<div class="ttc" id="classJobQueue_xhtml_a1ebc0fe54f5dd11d142e0ef9e583df19"><div class="ttname"><a href="classJobQueue.xhtml#a1ebc0fe54f5dd11d142e0ef9e583df19">JobQueue::c</a></div><div class="ttdeci">wxCriticalSection c</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:47</div></div>
<div class="ttc" id="classJobQueue_xhtml"><div class="ttname"><a href="classJobQueue.xhtml">JobQueue</a></div><div class="ttdef"><b>Definition:</b> backgroundthread.h:45</div></div>
<div class="ttc" id="structDeath_xhtml_afc132d0e965bda5e28711f4017ca2c95"><div class="ttname"><a href="structDeath.xhtml#afc132d0e965bda5e28711f4017ca2c95">Death::operator()</a></div><div class="ttdeci">void operator()(BackgroundThread *t)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:172</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a8bbadc73c58392abd9adadebcb21bcf0"><div class="ttname"><a href="classBackgroundThread.xhtml#a8bbadc73c58392abd9adadebcb21bcf0">BackgroundThread::die</a></div><div class="ttdeci">bool die</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:70</div></div>
<div class="ttc" id="manager_8h_xhtml"><div class="ttname"><a href="manager_8h.xhtml">manager.h</a></div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_afe56b52a28960647092583a2e7b633d7"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#afe56b52a28960647092583a2e7b633d7">BackgroundThreadPool::AddThread</a></div><div class="ttdeci">void AddThread(BackgroundThread *t)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:197</div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_a8a9fd3ec7ccedb275a4c94e5561b8066"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#a8a9fd3ec7ccedb275a4c94e5561b8066">BackgroundThreadPool::semaphore</a></div><div class="ttdeci">wxSemaphore semaphore</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:179</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_aac4d54d3eb4d879be0a09baa31352f7c"><div class="ttname"><a href="classBackgroundThread.xhtml#aac4d54d3eb4d879be0a09baa31352f7c">BackgroundThread::BackgroundThread</a></div><div class="ttdeci">BackgroundThread(const bool owns_jobs=true)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:97</div></div>
<div class="ttc" id="structDeath_xhtml"><div class="ttname"><a href="structDeath.xhtml">Death</a></div><div class="ttdef"><b>Definition:</b> backgroundthread.h:172</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_adc75ff7160d2715de4e9d5d2a65e8724"><div class="ttname"><a href="classBackgroundThread.xhtml#adc75ff7160d2715de4e9d5d2a65e8724">BackgroundThread::BackgroundThread</a></div><div class="ttdeci">BackgroundThread(JobQueue *q, const bool owns_jobs=true)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:90</div></div>
<div class="ttc" id="safedelete_8h_xhtml_af855c31ddf331947121e188b8bb631c2"><div class="ttname"><a href="safedelete_8h.xhtml#af855c31ddf331947121e188b8bb631c2">Delete</a></div><div class="ttdeci">void Delete(std::vector&lt; T &gt; &amp;s)</div><div class="ttdef"><b>Definition:</b> safedelete.h:20</div></div>
<div class="ttc" id="classJobQueue_xhtml_aac34ef91c7944497badbc4dd7c5d4552"><div class="ttname"><a href="classJobQueue.xhtml#aac34ef91c7944497badbc4dd7c5d4552">JobQueue::Pop</a></div><div class="ttdeci">AbstractJob * Pop()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:55</div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml"><div class="ttname"><a href="classBackgroundThreadPool.xhtml">BackgroundThreadPool</a></div><div class="ttdef"><b>Definition:</b> backgroundthread.h:174</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a4c19f248535e0bd43ea4ee53538c3704"><div class="ttname"><a href="classBackgroundThread.xhtml#a4c19f248535e0bd43ea4ee53538c3704">BackgroundThread::semaphore</a></div><div class="ttdeci">wxSemaphore * semaphore</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:69</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a59b4770394bb0b3272fc7fc67755a35a"><div class="ttname"><a href="classBackgroundThread.xhtml#a59b4770394bb0b3272fc7fc67755a35a">BackgroundThread::ownsJobs</a></div><div class="ttdeci">const bool ownsJobs</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:73</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a34fd4ac7adabe5b3bafb07cb24ffad51"><div class="ttname"><a href="classBackgroundThread.xhtml#a34fd4ac7adabe5b3bafb07cb24ffad51">BackgroundThread::MarkDying</a></div><div class="ttdeci">void MarkDying()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:127</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a86efc91b90e29fffd40b398ecd6d2114"><div class="ttname"><a href="classBackgroundThread.xhtml#a86efc91b90e29fffd40b398ecd6d2114">BackgroundThread::Die</a></div><div class="ttdeci">void Die()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:119</div></div>
<div class="ttc" id="safedelete_8h_xhtml"><div class="ttname"><a href="safedelete_8h.xhtml">safedelete.h</a></div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a584178ed1da2d80a75feb33f795f35ea"><div class="ttname"><a href="classBackgroundThread.xhtml#a584178ed1da2d80a75feb33f795f35ea">BackgroundThread::~BackgroundThread</a></div><div class="ttdeci">~BackgroundThread()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:104</div></div>
<div class="ttc" id="classBackgroundThreadPool_xhtml_aa692a057bb56ffb3be9b8c1d549dca69"><div class="ttname"><a href="classBackgroundThreadPool.xhtml#aa692a057bb56ffb3be9b8c1d549dca69">BackgroundThreadPool::Queue</a></div><div class="ttdeci">void Queue(AbstractJob *j)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:202</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_ab924d649472f4621fa2dbb65eeb6e29d"><div class="ttname"><a href="classBackgroundThread.xhtml#ab924d649472f4621fa2dbb65eeb6e29d">BackgroundThread::ownsSemaphore</a></div><div class="ttdeci">const bool ownsSemaphore</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:72</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_ad3f8a13fa4577a52fffd7f6fed0c4eed"><div class="ttname"><a href="classBackgroundThread.xhtml#ad3f8a13fa4577a52fffd7f6fed0c4eed">BackgroundThread::Entry</a></div><div class="ttdeci">ExitCode Entry()</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:147</div></div>
<div class="ttc" id="classBackgroundThread_xhtml_a16bb8d905300baae3caa37230174e9cc"><div class="ttname"><a href="classBackgroundThread.xhtml#a16bb8d905300baae3caa37230174e9cc">BackgroundThread::Queue</a></div><div class="ttdeci">void Queue(AbstractJob *j)</div><div class="ttdef"><b>Definition:</b> backgroundthread.h:113</div></div>
<div class="ttc" id="structAgony_xhtml"><div class="ttname"><a href="structAgony.xhtml">Agony</a></div><div class="ttdef"><b>Definition:</b> backgroundthread.h:171</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.8
</small></address>
</body>
</html>
