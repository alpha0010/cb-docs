<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.8"/>
<title>Code::Blocks: cbPlugin Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Code::Blocks
   &#160;<span id="projectnumber">SVN r10054</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.8 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classcbPlugin-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cbPlugin Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Base class for plugins This is the most basic class a plugin must descend from. <a class="el" href="classcbPlugin.xhtml" title="Base class for plugins This is the most basic class a plugin must descend from. cbPlugin descends fro...">cbPlugin</a> descends from wxEvtHandler, so it provides its methods as well... <br />
 <br />
It's not enough to create a new plugin. You must also provide a resource zip file containing a file named "manifest.xml". Check the manifest.xml file of existing plugins to see how to create one (it's ultra-simple).  
 <a href="classcbPlugin.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="cbplugin_8h_source.xhtml">cbplugin.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cbPlugin:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classcbPlugin__inherit__graph.svg" width="1414" height="1946"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Collaboration diagram for cbPlugin:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classcbPlugin__coll__graph.svg" width="222" height="492"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abcba4dcc8a4b0effeecd45c9a7a35bdc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#abcba4dcc8a4b0effeecd45c9a7a35bdc">cbPlugin</a> ()</td></tr>
<tr class="separator:abcba4dcc8a4b0effeecd45c9a7a35bdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36139db2ac938bb33994a951dd2c0a27"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a36139db2ac938bb33994a951dd2c0a27">~cbPlugin</a> ()</td></tr>
<tr class="separator:a36139db2ac938bb33994a951dd2c0a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18b4a1951ba136a393eaf353cfbaf6f4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="globals_8h.xhtml#a54e0db21fd49ff6e0178b6ebe120a6d2">PluginType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a18b4a1951ba136a393eaf353cfbaf6f4">GetType</a> () const </td></tr>
<tr class="separator:a18b4a1951ba136a393eaf353cfbaf6f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d819171f8cbb8c78b2ab2e59a968750"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a8d819171f8cbb8c78b2ab2e59a968750">GetConfigurationPriority</a> () const </td></tr>
<tr class="separator:a8d819171f8cbb8c78b2ab2e59a968750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6167adad745de4d0cfb3dc5b8ea7b80"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#ae6167adad745de4d0cfb3dc5b8ea7b80">GetConfigurationGroup</a> () const </td></tr>
<tr class="separator:ae6167adad745de4d0cfb3dc5b8ea7b80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdb854d50a47dc61104d871cb9e5bbb4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classcbConfigurationPanel.xhtml">cbConfigurationPanel</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#acdb854d50a47dc61104d871cb9e5bbb4">GetConfigurationPanel</a> (cb_optional wxWindow *parent)</td></tr>
<tr class="separator:acdb854d50a47dc61104d871cb9e5bbb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57aada8a5db8862f27cd0c4a2be33dc3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classcbConfigurationPanel.xhtml">cbConfigurationPanel</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a57aada8a5db8862f27cd0c4a2be33dc3">GetProjectConfigurationPanel</a> (cb_optional wxWindow *parent, cb_optional <a class="el" href="classcbProject.xhtml">cbProject</a> *project)</td></tr>
<tr class="separator:a57aada8a5db8862f27cd0c4a2be33dc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ed59bfa47d997fd6c01161f8f5c5695"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a3ed59bfa47d997fd6c01161f8f5c5695">BuildMenu</a> (cb_optional wxMenuBar *menuBar)</td></tr>
<tr class="separator:a3ed59bfa47d997fd6c01161f8f5c5695"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40355dcf41514c68b1605afade4eb214"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a40355dcf41514c68b1605afade4eb214">BuildModuleMenu</a> (cb_optional const <a class="el" href="globals_8h.xhtml#a224128d35337e2b42cebf846d4d0c6f1">ModuleType</a> type, cb_optional wxMenu *menu, cb_optional const <a class="el" href="classFileTreeData.xhtml">FileTreeData</a> *data=<a class="el" href="nullptr_8cpp.xhtml#aba64803b6b2e4821288e0488d6501a25">nullptr</a>)</td></tr>
<tr class="separator:a40355dcf41514c68b1605afade4eb214"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aa4cb1c33d27d89b89f6e43f4adf049"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a7aa4cb1c33d27d89b89f6e43f4adf049">BuildToolBar</a> (cb_optional wxToolBar *toolBar)</td></tr>
<tr class="separator:a7aa4cb1c33d27d89b89f6e43f4adf049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd78d0dba7cc6d6f4a115a16428f4a9d"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#abd78d0dba7cc6d6f4a115a16428f4a9d">GetToolBarPriority</a> ()</td></tr>
<tr class="separator:abd78d0dba7cc6d6f4a115a16428f4a9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac051857bc14648f3e3e535e181e60587"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#ac051857bc14648f3e3e535e181e60587">CreateStatusField</a> (<a class="el" href="classcbStatusBar.xhtml">cbStatusBar</a> *statusBar)</td></tr>
<tr class="separator:ac051857bc14648f3e3e535e181e60587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a295a1b1c3ef2f77c3947ec76d3c38363"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a295a1b1c3ef2f77c3947ec76d3c38363">IsAttached</a> () const </td></tr>
<tr class="separator:a295a1b1c3ef2f77c3947ec76d3c38363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbdab814d5669423aa6b1cfe37d8620b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#adbdab814d5669423aa6b1cfe37d8620b">CanDetach</a> () const </td></tr>
<tr class="separator:adbdab814d5669423aa6b1cfe37d8620b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a8e855482f08967387ed20a55f029b3ed"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a8e855482f08967387ed20a55f029b3ed">OnAttach</a> ()</td></tr>
<tr class="separator:a8e855482f08967387ed20a55f029b3ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8904f93e8ace65efe0795e1a546082c1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a8904f93e8ace65efe0795e1a546082c1">OnRelease</a> (cb_optional bool appShutDown)</td></tr>
<tr class="separator:a8904f93e8ace65efe0795e1a546082c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a959daef762d9b11907eb2c8e9072a4e0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a959daef762d9b11907eb2c8e9072a4e0">NotImplemented</a> (const wxString &amp;log) const </td></tr>
<tr class="separator:a959daef762d9b11907eb2c8e9072a4e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ad049ab124064dd4e458c9a1a0821e123"><td class="memItemLeft" align="right" valign="top"><a class="el" href="globals_8h.xhtml#a54e0db21fd49ff6e0178b6ebe120a6d2">PluginType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#ad049ab124064dd4e458c9a1a0821e123">m_Type</a></td></tr>
<tr class="separator:ad049ab124064dd4e458c9a1a0821e123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0c8259006d1df113c6385efaf84e387"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#ac0c8259006d1df113c6385efaf84e387">m_IsAttached</a></td></tr>
<tr class="separator:ac0c8259006d1df113c6385efaf84e387"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a114a1c077d4d1f508b83127743ae5ae9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a114a1c077d4d1f508b83127743ae5ae9">Attach</a> ()</td></tr>
<tr class="separator:a114a1c077d4d1f508b83127743ae5ae9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65dd620c41caa115fc7831d3a920fd75"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#a65dd620c41caa115fc7831d3a920fd75">Release</a> (bool appShutDown)</td></tr>
<tr class="separator:a65dd620c41caa115fc7831d3a920fd75"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ad0ccd35859b04e162412b22bf5200374"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcbPlugin.xhtml#ad0ccd35859b04e162412b22bf5200374">PluginManager</a></td></tr>
<tr class="separator:ad0ccd35859b04e162412b22bf5200374"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Base class for plugins This is the most basic class a plugin must descend from. <a class="el" href="classcbPlugin.xhtml" title="Base class for plugins This is the most basic class a plugin must descend from. cbPlugin descends fro...">cbPlugin</a> descends from wxEvtHandler, so it provides its methods as well... <br />
 <br />
It's not enough to create a new plugin. You must also provide a resource zip file containing a file named "manifest.xml". Check the manifest.xml file of existing plugins to see how to create one (it's ultra-simple). </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="abcba4dcc8a4b0effeecd45c9a7a35bdc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cbPlugin::cbPlugin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>In default <a class="el" href="classcbPlugin.xhtml" title="Base class for plugins This is the most basic class a plugin must descend from. cbPlugin descends fro...">cbPlugin</a>'s constructor the associated <a class="el" href="pluginmanager_8h.xhtml#structPluginInfo">PluginInfo</a> structure is filled with default values. If you inherit from <a class="el" href="classcbPlugin.xhtml" title="Base class for plugins This is the most basic class a plugin must descend from. cbPlugin descends fro...">cbPlugin</a>, you should fill the m_PluginInfo members with the appropriate values. </p>

</div>
</div>
<a class="anchor" id="a36139db2ac938bb33994a951dd2c0a27"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cbPlugin::~cbPlugin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classcbPlugin.xhtml" title="Base class for plugins This is the most basic class a plugin must descend from. cbPlugin descends fro...">cbPlugin</a> destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a114a1c077d4d1f508b83127743ae5ae9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cbPlugin::Attach </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Attach is <b>not</b> a virtual function, so you can't override it. The default implementation hooks the plugin to Code::Block's event handling system, so that the plugin can receive (and process) events from Code::Blocks core library. Use <a class="el" href="classcbPlugin.xhtml#a8e855482f08967387ed20a55f029b3ed">OnAttach()</a> for any initialization specific tasks. </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcbPlugin.xhtml#a8e855482f08967387ed20a55f029b3ed">OnAttach()</a> </dd></dl>

<p>References <a class="el" href="sdk__events_8h.xhtml#afaf387afbf30f569a23b3e48d27db32f">cbEVT_PLUGIN_ATTACHED</a>, <a class="el" href="classManager.xhtml#acf40c9bf3465914dd64d9fdf3b3dc80a">Manager::Get()</a>, <a class="el" href="classManager.xhtml#a77ded4431d0878d2fddaf1c696b18ad9">Manager::GetAppWindow()</a>, <a class="el" href="classcbPlugin.xhtml#ac0c8259006d1df113c6385efaf84e387">m_IsAttached</a>, <a class="el" href="classcbPlugin.xhtml#a8e855482f08967387ed20a55f029b3ed">OnAttach()</a>, and <a class="el" href="classManager.xhtml#ac087c2921db78af11b3188d1dd093406">Manager::ProcessEvent()</a>.</p>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#ae4ccaed93a9c7c15507e175238646110">PluginManager::AttachPlugin()</a>.</p>

</div>
</div>
<a class="anchor" id="a3ed59bfa47d997fd6c01161f8f5c5695"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void cbPlugin::BuildMenu </td>
          <td>(</td>
          <td class="paramtype">cb_optional wxMenuBar *&#160;</td>
          <td class="paramname"><em>menuBar</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This method is called by Code::Blocks and is used by the plugin to add any menu items it needs on Code::Blocks's menu bar.<br />
It is a pure virtual method that needs to be implemented by all plugins. If the plugin does not need to add items on the menu, just do nothing ;)</p>
<dl class="section note"><dt>Note</dt><dd>This function may be called more than one time. This can happen, for example, when a plugin is installed or uninstalled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">menuBar</td><td>the wxMenuBar to create items in </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a40355dcf41514c68b1605afade4eb214"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void cbPlugin::BuildModuleMenu </td>
          <td>(</td>
          <td class="paramtype">cb_optional const <a class="el" href="globals_8h.xhtml#a224128d35337e2b42cebf846d4d0c6f1">ModuleType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cb_optional wxMenu *&#160;</td>
          <td class="paramname"><em>menu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cb_optional const <a class="el" href="classFileTreeData.xhtml">FileTreeData</a> *&#160;</td>
          <td class="paramname"><em>data</em> = <code><a class="el" href="nullptr_8cpp.xhtml#aba64803b6b2e4821288e0488d6501a25">nullptr</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This method is called by Code::Blocks core modules (<a class="el" href="classEditorManager.xhtml">EditorManager</a>, <a class="el" href="classProjectManager.xhtml" title="The entry point singleton for working with projects. ">ProjectManager</a> etc) and is used by the plugin to add any menu items it needs in the module's popup menu. For example, when the user right-clicks on a project file in the project tree, <a class="el" href="classProjectManager.xhtml" title="The entry point singleton for working with projects. ">ProjectManager</a> prepares a popup menu to display with context sensitive options for that file. Before it displays this popup menu, it asks all attached plugins (by asking <a class="el" href="classPluginManager.xhtml">PluginManager</a> to call this method), if they need to add any entries in that menu. This method is called.<br />
If the plugin does not need to add items in the menu, just do nothing ;) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>the module that's preparing a popup menu </td></tr>
    <tr><td class="paramname">menu</td><td>pointer to the popup menu </td></tr>
    <tr><td class="paramname">data</td><td>pointer to <a class="el" href="classFileTreeData.xhtml">FileTreeData</a> object (to access/modify the file tree) </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#ae990fcb3cefccd86b0251aabffa0b73e">PluginManager::AskPluginsForModuleMenu()</a>.</p>

</div>
</div>
<a class="anchor" id="a7aa4cb1c33d27d89b89f6e43f4adf049"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool cbPlugin::BuildToolBar </td>
          <td>(</td>
          <td class="paramtype">cb_optional wxToolBar *&#160;</td>
          <td class="paramname"><em>toolBar</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This method is called by Code::Blocks and is used by the plugin to add any toolbar items it needs on Code::Blocks's toolbar.<br />
It is a pure virtual method that needs to be implemented by all plugins. If the plugin does not need to add items on the toolbar, just do nothing ;) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">toolBar</td><td>the wxToolBar to create items on </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The plugin should return true if it needed the toolbar, false if not </dd></dl>

</div>
</div>
<a class="anchor" id="adbdab814d5669423aa6b1cfe37d8620b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool cbPlugin::CanDetach </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>See whether this plugin can be detached (unloaded) or not. This function is called usually when the user requests to uninstall or disable a plugin. Before disabling/uninstalling it, Code::Blocks asks the plugin if it can be detached or not. In other words, it checks to see if it can be disabled/uninstalled safely... </p><dl class="section user"><dt></dt><dd>A plugin should return true if it can be detached at this moment, false if not. </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>The default implementation returns true. </dd></dl>

</div>
</div>
<a class="anchor" id="ac051857bc14648f3e3e535e181e60587"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void cbPlugin::CreateStatusField </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcbStatusBar.xhtml">cbStatusBar</a> *&#160;</td>
          <td class="paramname"><em>statusBar</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This method is called by Code::Blocks and is used by the plugin to add a field on Code::Blocks's statusbar.<br />
If the plugin does not need to add items on the statusbar, just do nothing ;) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">statusBar</td><td>the <a class="el" href="classcbStatusBar.xhtml" title="A custom status bar which can contain controls, icons... ">cbStatusBar</a> to create items on </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae6167adad745de4d0cfb3dc5b8ea7b80"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int cbPlugin::GetConfigurationGroup </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the configuration group for this plugin. Default is cgUnknown. Notice that you can logically AND more than one configuration groups, so you could set it, for example, as "cgCompiler | cgContribPlugin". </p>

<p>Reimplemented in <a class="el" href="classCompilerGCC.xhtml#a9ca251246ebffdde3e82943ad01f87f1">CompilerGCC</a>, and <a class="el" href="classCodeCompletion.xhtml#a0a2de4fff87cfb88fa0b0e9ddd532db4">CodeCompletion</a>.</p>

<p>References <a class="el" href="cbplugin_8h.xhtml#aa8310b5ca66516dd64fb2c471d0f282a">cgUnknown</a>.</p>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#a316c6ffb5be3ebba68617c272ba9d296">PluginManager::GetConfigurationPanels()</a>.</p>

</div>
</div>
<a class="anchor" id="acdb854d50a47dc61104d871cb9e5bbb4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classcbConfigurationPanel.xhtml">cbConfigurationPanel</a>* cbPlugin::GetConfigurationPanel </td>
          <td>(</td>
          <td class="paramtype">cb_optional wxWindow *&#160;</td>
          <td class="paramname"><em>parent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return plugin's configuration panel. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">parent</td><td>The parent window. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the plugin's <a class="el" href="classcbConfigurationPanel.xhtml" title="Base class for plugin configuration panels. ">cbConfigurationPanel</a>. It is deleted by the caller. </dd></dl>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#a316c6ffb5be3ebba68617c272ba9d296">PluginManager::GetConfigurationPanels()</a>.</p>

</div>
</div>
<a class="anchor" id="a8d819171f8cbb8c78b2ab2e59a968750"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int cbPlugin::GetConfigurationPriority </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the plugin's configuration priority. This is a number (default is 50) that is used to sort plugins in configuration dialogs. Lower numbers mean the plugin's configuration is put higher in the list. </p>

<p>Reimplemented in <a class="el" href="classCompilerGCC.xhtml#a89513518e752daf953edf53e3a713a5b">CompilerGCC</a>.</p>

</div>
</div>
<a class="anchor" id="a57aada8a5db8862f27cd0c4a2be33dc3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classcbConfigurationPanel.xhtml">cbConfigurationPanel</a>* cbPlugin::GetProjectConfigurationPanel </td>
          <td>(</td>
          <td class="paramtype">cb_optional wxWindow *&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cb_optional <a class="el" href="classcbProject.xhtml">cbProject</a> *&#160;</td>
          <td class="paramname"><em>project</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return plugin's configuration panel for projects. The panel returned from this function will be added in the project's configuration dialog. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">parent</td><td>The parent window. </td></tr>
    <tr><td class="paramname">project</td><td>The project that is being edited. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the plugin's <a class="el" href="classcbConfigurationPanel.xhtml" title="Base class for plugin configuration panels. ">cbConfigurationPanel</a>. It is deleted by the caller. </dd></dl>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#a0a3e08dccfc01a16c18dd4c9e387807b">PluginManager::GetProjectConfigurationPanels()</a>.</p>

</div>
</div>
<a class="anchor" id="abd78d0dba7cc6d6f4a115a16428f4a9d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int cbPlugin::GetToolBarPriority </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This method return the priority of the plugin's toolbar, the less value indicates a more preceding position when C::B starts with no configuration file </p>

<p>Reimplemented in <a class="el" href="classCompilerGCC.xhtml#a69f013836a38eab39ae0a45a0fa15f8b">CompilerGCC</a>, and <a class="el" href="classCodeCompletion.xhtml#ab0162e639edc8b6576730935dd10ae00">CodeCompletion</a>.</p>

</div>
</div>
<a class="anchor" id="a18b4a1951ba136a393eaf353cfbaf6f4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="globals_8h.xhtml#a54e0db21fd49ff6e0178b6ebe120a6d2">PluginType</a> cbPlugin::GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>The plugin must return its type on request. </p>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#a75026176834f8ed8f7410fc4c01ffcc4">PluginManager::ExecutePlugin()</a>, and <a class="el" href="classPluginManager.xhtml#aed403704213b8b9d1bb9c634db677973">PluginManager::GetOffersFor()</a>.</p>

</div>
</div>
<a class="anchor" id="a295a1b1c3ef2f77c3947ec76d3c38363"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool cbPlugin::IsAttached </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>See whether this plugin is attached or not. A plugin should not perform any of its tasks, if not attached... </p><dl class="section note"><dt>Note</dt><dd>This function is <em>not</em> virtual. </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if it attached, false if not. </dd></dl>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#ae990fcb3cefccd86b0251aabffa0b73e">PluginManager::AskPluginsForModuleMenu()</a>, <a class="el" href="classPluginManager.xhtml#ae4ccaed93a9c7c15507e175238646110">PluginManager::AttachPlugin()</a>, <a class="el" href="classCodeCompletion.xhtml#ae2a9273883c285e3e44c881029c28cc2">CodeCompletion::BuildMenu()</a>, <a class="el" href="classCompilerGCC.xhtml#a0526f9762cba30afcca6dda22776d4c3">CompilerGCC::BuildMenu()</a>, <a class="el" href="classcbDebuggerPlugin.xhtml#a2c344fe530042bf173054383703ff163">cbDebuggerPlugin::BuildMenu()</a>, <a class="el" href="classCodeCompletion.xhtml#a169f3a1f0d12859f1bb74c846e062b09">CodeCompletion::BuildModuleMenu()</a>, <a class="el" href="classCompilerGCC.xhtml#ae11d510fd6d484785ede66f8241bb585">CompilerGCC::BuildModuleMenu()</a>, <a class="el" href="classcbDebuggerPlugin.xhtml#a15892849aa53578c1e6f646efb4d62a1">cbDebuggerPlugin::BuildModuleMenu()</a>, <a class="el" href="classCompilerGCC.xhtml#af0d688f678e16ed235acb86793f9e2a1">CompilerGCC::BuildToolBar()</a>, <a class="el" href="classcbDebuggerPlugin.xhtml#a593cec0e605dcff2b673ee01ace38d4f">cbDebuggerPlugin::DebugLog()</a>, <a class="el" href="classPluginManager.xhtml#a3a3b4d535b5a9a1c03db163ba4a5d766">PluginManager::DetachPlugin()</a>, <a class="el" href="classCodeCompletion.xhtml#ab4bc3803d1bf0ef1703e0a6355fc45f4">CodeCompletion::DoAllMethodsImpl()</a>, <a class="el" href="classCodeCompletion.xhtml#a7fc8ad45379b08c75033009b7e95c6a6">CodeCompletion::DoClassMethodDeclImpl()</a>, <a class="el" href="classCompilerGCC.xhtml#ab5b7d86f03bd7c40152307b81f3bcc36">CompilerGCC::DoRecreateTargetMenu()</a>, <a class="el" href="classCodeCompletion.xhtml#a1847c30d00469f2ea08d0dafe2be20fb">CodeCompletion::EditorEventHook()</a>, <a class="el" href="classPluginsConfigurationDlg.xhtml#a8baa8cc73daf915db048d630cdfd90d8">PluginsConfigurationDlg::FillList()</a>, <a class="el" href="classCodeCompletion.xhtml#a41503b2f0bbf7bb70fb39bd373446240">CodeCompletion::GetAutocompList()</a>, <a class="el" href="classCodeCompletion.xhtml#a545602ade097b198265727213f909226">CodeCompletion::GetCallTips()</a>, <a class="el" href="classPluginManager.xhtml#a316c6ffb5be3ebba68617c272ba9d296">PluginManager::GetConfigurationPanels()</a>, <a class="el" href="classPluginManager.xhtml#aed403704213b8b9d1bb9c634db677973">PluginManager::GetOffersFor()</a>, <a class="el" href="classPluginManager.xhtml#a0a3e08dccfc01a16c18dd4c9e387807b">PluginManager::GetProjectConfigurationPanels()</a>, <a class="el" href="classCodeCompletion.xhtml#ac0078946b54d3cf30e529889fec6f944">CodeCompletion::GetTokenAt()</a>, <a class="el" href="classPluginManager.xhtml#a0bca79c345c81180fc7980145f138408">PluginManager::LoadAllPlugins()</a>, <a class="el" href="classcbDebuggerPlugin.xhtml#a8a87219f335039cabf7f94e668cc2ccc">cbDebuggerPlugin::Log()</a>, <a class="el" href="classCodeCompletion.xhtml#aec5e8de65a1ca709a8d07de7a130f286">CodeCompletion::OnEditorActivated()</a>, <a class="el" href="classCodeCompletion.xhtml#ab6653fbe616a78a0591a99f873670718">CodeCompletion::OnEditorOpen()</a>, <a class="el" href="classCodeCompletion.xhtml#abd501b16cc21007d0598e7bc908025f4">CodeCompletion::OnEditorSave()</a>, <a class="el" href="classCodeCompletion.xhtml#adecacec0b8316d2c49ab0cb2f5fb1635">CodeCompletion::OnProjectActivated()</a>, <a class="el" href="classCodeCompletion.xhtml#a4dbdaa9d4b289732c2cc85b693b014bb">CodeCompletion::OnProjectClosed()</a>, <a class="el" href="classCodeCompletion.xhtml#a397f9e2d7c59ca09833cea8a69ad80df">CodeCompletion::OnProjectFileAdded()</a>, <a class="el" href="classCodeCompletion.xhtml#ac687f2bebd87d012793bdb945cfc5a9b">CodeCompletion::OnProjectFileChanged()</a>, <a class="el" href="classCodeCompletion.xhtml#a20da9311bcf508baea96236e5bf00eb7">CodeCompletion::OnProjectFileRemoved()</a>, <a class="el" href="classCodeCompletion.xhtml#a5cb20dfc6596d2c3fc7eae556c08680d">CodeCompletion::OnProjectSavedTimer()</a>, <a class="el" href="classCodeCompletion.xhtml#a3fbbab2507931f95cf45a63c33e1577f">CodeCompletion::OnReparsingTimer()</a>, <a class="el" href="classPluginsConfigurationDlg.xhtml#a31971fc9d93c4575fa46a7a679727511">PluginsConfigurationDlg::OnToggle()</a>, <a class="el" href="classPluginsConfigurationDlg.xhtml#aa7a5b6dc0f5b2c9548b143989e1af56d">PluginsConfigurationDlg::OnUpdateUI()</a>, and <a class="el" href="classCodeCompletion.xhtml#ae560a6d28e5cfaf8fa2e23b4089251ab">CodeCompletion::OnWorkspaceChanged()</a>.</p>

</div>
</div>
<a class="anchor" id="a959daef762d9b11907eb2c8e9072a4e0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cbPlugin::NotImplemented </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&#160;</td>
          <td class="paramname"><em>log</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This method logs a "Not implemented" message and is provided for convenience only. </p>

<p>References <a class="el" href="classLogManager.xhtml#a9b9ce987917f59b60428ec76c916bde6">LogManager::DebugLog()</a>, <a class="el" href="classManager.xhtml#acf40c9bf3465914dd64d9fdf3b3dc80a">Manager::Get()</a>, and <a class="el" href="classManager.xhtml#aad10e86a7e2db6efe90e7b8c81f7341c">Manager::GetLogManager()</a>.</p>

<p>Referenced by <a class="el" href="classCompilerGCC.xhtml#a121d65e23d2e6720c82bf840c715f58a">CompilerGCC::DistClean()</a>.</p>

</div>
</div>
<a class="anchor" id="a8e855482f08967387ed20a55f029b3ed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void cbPlugin::OnAttach </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Any descendent plugin should override this virtual method and perform any necessary initialization. This method is called by Code::Blocks (<a class="el" href="classPluginManager.xhtml">PluginManager</a> actually) when the plugin has been loaded and should attach in Code::Blocks. When Code::Blocks starts up, it finds and <em>loads</em> all plugins but <em>does not</em> activate (attaches) them. It then activates all plugins that the user has selected to be activated on start-up.<br />
This means that a plugin might be loaded but <b>not</b> activated...<br />
Think of this method as the actual constructor... </p>

<p>Reimplemented in <a class="el" href="classcbSmartIndentPlugin.xhtml#ac811162831285253144a9ab6be6cf568">cbSmartIndentPlugin</a>, <a class="el" href="classcbDebuggerPlugin.xhtml#ac2bd3cfe3a12a558b04b194c69d3a0b2">cbDebuggerPlugin</a>, <a class="el" href="classWiz.xhtml#a454b909d00c95317b78e8b85a35a3a8d">Wiz</a>, <a class="el" href="classCompilerGCC.xhtml#a72dd109aec37be917ed196e9e01bd8e5">CompilerGCC</a>, and <a class="el" href="classCodeCompletion.xhtml#ab8d12dd91635e01b3922efd10e35ffaf">CodeCompletion</a>.</p>

<p>Referenced by <a class="el" href="classcbPlugin.xhtml#a114a1c077d4d1f508b83127743ae5ae9">Attach()</a>.</p>

</div>
</div>
<a class="anchor" id="a8904f93e8ace65efe0795e1a546082c1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void cbPlugin::OnRelease </td>
          <td>(</td>
          <td class="paramtype">cb_optional bool&#160;</td>
          <td class="paramname"><em>appShutDown</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Any descendent plugin should override this virtual method and perform any necessary de-initialization. This method is called by Code::Blocks (<a class="el" href="classPluginManager.xhtml">PluginManager</a> actually) when the plugin has been loaded, attached and should de-attach from Code::Blocks.<br />
Think of this method as the actual destructor... </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">appShutDown</td><td>If true, the application is shutting down. In this case <em>don't</em> use <a class="el" href="classManager.xhtml#acf40c9bf3465914dd64d9fdf3b3dc80a">Manager::Get()</a>-&gt;Get...() functions or the behaviour is undefined... </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classcbPlugin.xhtml#a65dd620c41caa115fc7831d3a920fd75">Release()</a>.</p>

</div>
</div>
<a class="anchor" id="a65dd620c41caa115fc7831d3a920fd75"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cbPlugin::Release </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>appShutDown</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Release is <b>not</b> a virtual function, so you can't override it. The default implementation un-hooks the plugin from Code::Blocks's event handling system. Use <a class="el" href="classcbPlugin.xhtml#a8904f93e8ace65efe0795e1a546082c1">OnRelease()</a> for any clean-up specific tasks. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">appShutDown</td><td>If true, the application is shutting down. In this case <em>don't</em> use <a class="el" href="classManager.xhtml#acf40c9bf3465914dd64d9fdf3b3dc80a">Manager::Get()</a>-&gt;Get...() functions or the behaviour is undefined... </td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcbPlugin.xhtml#a8904f93e8ace65efe0795e1a546082c1">OnRelease()</a> </dd></dl>

<p>References <a class="el" href="sdk__events_8h.xhtml#a0d4a128e8e6e02f8abbe44b925e23ad3">cbEVT_PLUGIN_RELEASED</a>, <a class="el" href="classManager.xhtml#acf40c9bf3465914dd64d9fdf3b3dc80a">Manager::Get()</a>, <a class="el" href="classManager.xhtml#a77ded4431d0878d2fddaf1c696b18ad9">Manager::GetAppWindow()</a>, <a class="el" href="classcbPlugin.xhtml#ac0c8259006d1df113c6385efaf84e387">m_IsAttached</a>, <a class="el" href="classcbPlugin.xhtml#a8904f93e8ace65efe0795e1a546082c1">OnRelease()</a>, and <a class="el" href="classManager.xhtml#ac087c2921db78af11b3188d1dd093406">Manager::ProcessEvent()</a>.</p>

<p>Referenced by <a class="el" href="classPluginManager.xhtml#a3a3b4d535b5a9a1c03db163ba4a5d766">PluginManager::DetachPlugin()</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="ad0ccd35859b04e162412b22bf5200374"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classPluginManager.xhtml">PluginManager</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="ac0c8259006d1df113c6385efaf84e387"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool cbPlugin::m_IsAttached</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Holds the "attached" state. </p>

<p>Referenced by <a class="el" href="classcbPlugin.xhtml#a114a1c077d4d1f508b83127743ae5ae9">Attach()</a>, and <a class="el" href="classcbPlugin.xhtml#a65dd620c41caa115fc7831d3a920fd75">Release()</a>.</p>

</div>
</div>
<a class="anchor" id="ad049ab124064dd4e458c9a1a0821e123"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="globals_8h.xhtml#a54e0db21fd49ff6e0178b6ebe120a6d2">PluginType</a> cbPlugin::m_Type</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Holds the plugin's type. Set in the default constructor. </p>

<p>Referenced by <a class="el" href="classcbCodeCompletionPlugin.xhtml#a2f9b2e0f2fc361f811cba52242f9e0e5">cbCodeCompletionPlugin::cbCodeCompletionPlugin()</a>, <a class="el" href="classcbCompilerPlugin.xhtml#aa73f7662a1ac7e658e1205c13e1a4a0c">cbCompilerPlugin::cbCompilerPlugin()</a>, <a class="el" href="classcbDebuggerPlugin.xhtml#a3c56f5dfec8ff9511b31ebdd46c9eee1">cbDebuggerPlugin::cbDebuggerPlugin()</a>, <a class="el" href="classcbMimePlugin.xhtml#a0680fac9a8a9f578f75175ed9f945a68">cbMimePlugin::cbMimePlugin()</a>, <a class="el" href="classcbSmartIndentPlugin.xhtml#a189274e78d99b78086994e401cee64e1">cbSmartIndentPlugin::cbSmartIndentPlugin()</a>, <a class="el" href="classcbToolPlugin.xhtml#a7b30b16bf70809e08964661b68620fa8">cbToolPlugin::cbToolPlugin()</a>, and <a class="el" href="classcbWizardPlugin.xhtml#a05c93e90a20cf34376070da2eec6d641">cbWizardPlugin::cbWizardPlugin()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="cbplugin_8h_source.xhtml">cbplugin.h</a></li>
<li><a class="el" href="cbplugin_8cpp.xhtml">cbplugin.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.8
</small></address>
</body>
</html>
