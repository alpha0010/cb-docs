<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.8"/>
<title>Code::Blocks: ExpressionConsts Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Code::Blocks
   &#160;<span id="projectnumber">SVN r10054</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.8 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ExpressionConsts Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8b9a4ec3a3647a8ce221fe6aa9ae53d8"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a8b9a4ec3a3647a8ce221fe6aa9ae53d8">Plus</a> (_T(&quot;+&quot;))</td></tr>
<tr class="separator:a8b9a4ec3a3647a8ce221fe6aa9ae53d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8955dc2ef64bdfa3716714bb765a68e"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#ae8955dc2ef64bdfa3716714bb765a68e">Subtract</a> (_T(&quot;-&quot;))</td></tr>
<tr class="separator:ae8955dc2ef64bdfa3716714bb765a68e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa996ad84b2ee347cf8bba5795553de40"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#aa996ad84b2ee347cf8bba5795553de40">Multiply</a> (_T(&quot;*&quot;))</td></tr>
<tr class="separator:aa996ad84b2ee347cf8bba5795553de40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad775820f694275ef68432436df6f3a9e"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#ad775820f694275ef68432436df6f3a9e">Divide</a> (_T(&quot;/&quot;))</td></tr>
<tr class="separator:ad775820f694275ef68432436df6f3a9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd0db2c6c6f70383523b29162fcf6f8c"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#abd0db2c6c6f70383523b29162fcf6f8c">LParenthesis</a> (_T(&quot;(&quot;))</td></tr>
<tr class="separator:abd0db2c6c6f70383523b29162fcf6f8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c000c5c2502ced232a630636c1e2d3a"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a4c000c5c2502ced232a630636c1e2d3a">RParenthesis</a> (_T(&quot;)&quot;))</td></tr>
<tr class="separator:a4c000c5c2502ced232a630636c1e2d3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10a4860e47125dafab687679387cab63"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a10a4860e47125dafab687679387cab63">Mod</a> (_T(&quot;%&quot;))</td></tr>
<tr class="separator:a10a4860e47125dafab687679387cab63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d1fe824f49f2b51fb2eec465b5351d"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a79d1fe824f49f2b51fb2eec465b5351d">Power</a> (_T(&quot;^&quot;))</td></tr>
<tr class="separator:a79d1fe824f49f2b51fb2eec465b5351d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dcbba602a9a70a126b37063d26b6614"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a9dcbba602a9a70a126b37063d26b6614">BitwiseAnd</a> (_T(&quot;&amp;&quot;))</td></tr>
<tr class="separator:a9dcbba602a9a70a126b37063d26b6614"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a098bef1a477e06c7ed3479622a9f9050"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a098bef1a477e06c7ed3479622a9f9050">BitwiseOr</a> (_T(&quot;|&quot;))</td></tr>
<tr class="separator:a098bef1a477e06c7ed3479622a9f9050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a642a7a22ed87c2c9f215fdb2daf57994"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a642a7a22ed87c2c9f215fdb2daf57994">And</a> (_T(&quot;&amp;&amp;&quot;))</td></tr>
<tr class="separator:a642a7a22ed87c2c9f215fdb2daf57994"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a057a06ddfbe7db84d167db5ad023d"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a94a057a06ddfbe7db84d167db5ad023d">Or</a> (_T(&quot;||&quot;))</td></tr>
<tr class="separator:a94a057a06ddfbe7db84d167db5ad023d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a702a38f68da05723ceaa4e78a6964fdc"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a702a38f68da05723ceaa4e78a6964fdc">Not</a> (_T(&quot;!&quot;))</td></tr>
<tr class="separator:a702a38f68da05723ceaa4e78a6964fdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb80738ed7f3495ac7e8b814d98af97c"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#adb80738ed7f3495ac7e8b814d98af97c">Equal</a> (_T(&quot;==&quot;))</td></tr>
<tr class="separator:adb80738ed7f3495ac7e8b814d98af97c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68ebb45bba27df6ab22688fedd27a26f"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a68ebb45bba27df6ab22688fedd27a26f">Unequal</a> (_T(&quot;!=&quot;))</td></tr>
<tr class="separator:a68ebb45bba27df6ab22688fedd27a26f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5bcd6e36cd2d363b5808d0e06474ff2"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#af5bcd6e36cd2d363b5808d0e06474ff2">GT</a> (_T(&quot;&gt;&quot;))</td></tr>
<tr class="separator:af5bcd6e36cd2d363b5808d0e06474ff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3d3934214064bc7df0fb0465a89becd"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#ab3d3934214064bc7df0fb0465a89becd">LT</a> (_T(&quot;&lt;&quot;))</td></tr>
<tr class="separator:ab3d3934214064bc7df0fb0465a89becd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b80671d6bda8934b83a7c2b424f89e6"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#a3b80671d6bda8934b83a7c2b424f89e6">GTOrEqual</a> (_T(&quot;&gt;=&quot;))</td></tr>
<tr class="separator:a3b80671d6bda8934b83a7c2b424f89e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7ab11174b0a6a7a998dedb815598015"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#ad7ab11174b0a6a7a998dedb815598015">LTOrEqual</a> (_T(&quot;&lt;=&quot;))</td></tr>
<tr class="separator:ad7ab11174b0a6a7a998dedb815598015"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ebe6b41886e36e6b224fc9faf6086e"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#af8ebe6b41886e36e6b224fc9faf6086e">LShift</a> (_T(&quot;&lt;&lt;&quot;))</td></tr>
<tr class="separator:af8ebe6b41886e36e6b224fc9faf6086e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed62eb2ee8f9ccb39961703bc2806f83"><td class="memItemLeft" align="right" valign="top">const wxString&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceExpressionConsts.xhtml#aed62eb2ee8f9ccb39961703bc2806f83">RShift</a> (_T(&quot;&gt;&gt;&quot;))</td></tr>
<tr class="separator:aed62eb2ee8f9ccb39961703bc2806f83"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a642a7a22ed87c2c9f215fdb2daf57994"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::And </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&amp;&amp;&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a9dcbba602a9a70a126b37063d26b6614"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::BitwiseAnd </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&amp;&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a098bef1a477e06c7ed3479622a9f9050"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::BitwiseOr </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;|&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="ad775820f694275ef68432436df6f3a9e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Divide </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;/&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="adb80738ed7f3495ac7e8b814d98af97c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Equal </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;==&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="af5bcd6e36cd2d363b5808d0e06474ff2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::GT </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&gt;&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classMacrosManager.xhtml#afad3add1425505419f8337d2ef60882d">MacrosManager::EvalCondition()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a3b80671d6bda8934b83a7c2b424f89e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::GTOrEqual </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&gt;=&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="abd0db2c6c6f70383523b29162fcf6f8c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::LParenthesis </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="af8ebe6b41886e36e6b224fc9faf6086e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::LShift </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&lt;&lt;&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="ab3d3934214064bc7df0fb0465a89becd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::LT </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&lt;&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classMacrosManager.xhtml#afad3add1425505419f8337d2ef60882d">MacrosManager::EvalCondition()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="ad7ab11174b0a6a7a998dedb815598015"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::LTOrEqual </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&lt;=&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a10a4860e47125dafab687679387cab63"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Mod </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;%&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="aa996ad84b2ee347cf8bba5795553de40"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Multiply </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;*&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a702a38f68da05723ceaa4e78a6964fdc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Not </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;!&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a94a057a06ddfbe7db84d167db5ad023d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Or </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;||&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a8b9a4ec3a3647a8ce221fe6aa9ae53d8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Plus </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;+&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a79d1fe824f49f2b51fb2eec465b5351d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Power </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;^&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a4c000c5c2502ced232a630636c1e2d3a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::RParenthesis </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;)&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="aed62eb2ee8f9ccb39961703bc2806f83"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::RShift </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;&gt;&gt;&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="ae8955dc2ef64bdfa3716714bb765a68e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Subtract </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;-&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
<a class="anchor" id="a68ebb45bba27df6ab22688fedd27a26f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const wxString ExpressionConsts::Unequal </td>
          <td>(</td>
          <td class="paramtype">_T(&quot;!=&quot;)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classExpressionNode.xhtml#adec775437377a9332e18869b39f65105">ExpressionNode::IsBinaryOperator()</a>, and <a class="el" href="classExpressionNode.xhtml#a54d5a5c459de02ac4bba505bcc86e071">ExpressionNode::ParseNodeType()</a>.</p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.8
</small></address>
</body>
</html>
